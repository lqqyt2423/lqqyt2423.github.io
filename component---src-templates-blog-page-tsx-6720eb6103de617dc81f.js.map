{"version":3,"sources":["webpack:///./src/templates/blog-page.tsx"],"names":["BlogIndex","data","location","pageContext","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","prevPage","nextPage","map","node","frontmatter","fields","slug","key","style","marginBottom","rhythm","boxShadow","to","path","date","dangerouslySetInnerHTML","__html","description","excerpt","marginTop","display","flexWrap","justifyContent","listStyle","padding","rel","pageQuery"],"mappings":"2FAAA,sIA2GeA,UArEG,SAAC,GAAkE,IAAhEC,EAAgE,EAAhEA,KAAMC,EAA0D,EAA1DA,SAAUC,EAAgD,EAAhDA,YAC7BC,EAAYH,EAAKI,KAAKC,aAAaC,MACnCC,EAAQP,EAAKQ,kBAAkBC,MAE7BC,EAAuBR,EAAvBQ,SAAUC,EAAaT,EAAbS,SAElB,OACE,kBAAC,IAAD,CAAQV,SAAUA,EAAUK,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAM,cACX,kBAAC,IAAD,MACCC,EAAMK,KAAI,YAAc,IAAXC,EAAW,EAAXA,KACNP,EAAQO,EAAKC,YAAYR,OAASO,EAAKE,OAAOC,KACpD,OACE,6BAASC,IAAKJ,EAAKE,OAAOC,MACxB,gCACE,wBACEE,MAAO,CACLC,aAAcC,YAAO,EAAI,KAG3B,kBAAC,OAAD,CAAMF,MAAO,CAAEG,UAAW,QAAUC,GAAIT,EAAKE,OAAOQ,MACjDjB,IAGL,+BAAQO,EAAKC,YAAYU,OAE3B,iCACE,uBACEC,wBAAyB,CACvBC,OAAQb,EAAKC,YAAYa,aAAed,EAAKe,gBAQzD,yBAAKV,MAAO,CACVW,UAAW,SAEX,wBACEX,MAAO,CACLY,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,IAGX,4BACGxB,GACC,kBAAC,OAAD,CAAMY,GAAIZ,EAAUyB,IAAI,QAAxB,WAKJ,4BACGxB,GACC,kBAAC,OAAD,CAAMW,GAAIX,EAAUwB,IAAI,QAAxB,eAaP,IAAMC,EAAY","file":"component---src-templates-blog-page-tsx-6720eb6103de617dc81f.js","sourcesContent":["// Gatsby supports TypeScript natively!\nimport React from \"react\"\nimport { PageProps, Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\n\ntype PageContext = {\n  prevPage: string\n  nextPage: string\n}\n\ntype Data = {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMarkdownRemark: {\n    edges: {\n      node: {\n        excerpt: string\n        frontmatter: {\n          title: string\n          date: string\n          description: string\n        }\n        fields: {\n          slug: string\n          path: string\n        }\n      }\n    }[]\n  }\n}\n\nconst BlogIndex = ({ data, location, pageContext }: PageProps<Data, PageContext>) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n\n  const { prevPage, nextPage } = pageContext\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"All posts\" />\n      <Bio />\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug\n        return (\n          <article key={node.fields.slug}>\n            <header>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link style={{ boxShadow: `none` }} to={node.fields.path}>\n                  {title}\n                </Link>\n              </h3>\n              <small>{node.frontmatter.date}</small>\n            </header>\n            <section>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt,\n                }}\n              />\n            </section>\n          </article>\n        )\n      })}\n\n      <nav style={{\n        marginTop: '50px',\n      }}>\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {prevPage && (\n              <Link to={prevPage} rel=\"prev\">\n                ← prev\n              </Link>\n            )}\n          </li>\n          <li>\n            {nextPage && (\n              <Link to={nextPage} rel=\"next\">\n                next →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query BlogPage($limit: Int!, $skip: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC },\n      limit: $limit,\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n            path\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}