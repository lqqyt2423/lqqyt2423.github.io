{"componentChunkName":"component---src-templates-blog-post-js","path":"/post/20170712-summary-of-basic-nodejs-knowledge/","result":{"data":{"site":{"siteMetadata":{"title":"lqqyt2423's blog"}},"markdownRemark":{"id":"de189b7c-9102-5cb9-ba06-a08ef5d30a01","excerpt":"数据库模块 fs 模块 HTTP 客户端请求时 当出现 错误时，可以的解决办法是设置： 下面这段话可能有所解释： 默认情况下， Node.js 会使用  这个类来创建 HTTP 连接，这个类实现了 socket 连接池，每个主机+端口对的连接数默认上限是…","html":"<h3>数据库模块</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> mysql <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mysql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 创建数据库连接</span>\n<span class=\"token keyword\">var</span> connection <span class=\"token operator\">=</span> mysql<span class=\"token punctuation\">.</span><span class=\"token function\">createConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  host<span class=\"token operator\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n  user<span class=\"token operator\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n  password<span class=\"token operator\">:</span> <span class=\"token string\">'0000'</span><span class=\"token punctuation\">,</span>\n  database<span class=\"token operator\">:</span> <span class=\"token string\">'phone_weixin'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 操作数据库返回数据</span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'select * from msg'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">,</span> fields</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>fs 模块</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 读取文件</span>\n<span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fileNmae.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 以添加模式写入字符</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fileName\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>flag<span class=\"token operator\">:</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<!-- more -->\n<h3>HTTP</h3>\n<h4>客户端请求时</h4>\n<p>当出现<code class=\"language-text\">ENOTFOUND</code> 错误时，可以的解决办法是设置：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">http<span class=\"token punctuation\">.</span>globalAgent<span class=\"token punctuation\">.</span>maxSockets <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>下面这段话可能有所解释：</p>\n<blockquote>\n<p>默认情况下， Node.js 会使用 <code class=\"language-text\">HTTP Agent</code> 这个类来创建 HTTP 连接，这个类实现了 socket 连接池，每个主机+端口对的连接数默认上限是 5。同时<code class=\"language-text\">HTTP Agent</code> 类发起的请求中默认带上了 <code class=\"language-text\">Connection: Keep-Alive</code>，导致已返回的连接没有及时释放，后面发起的请求只能排队。</p>\n<p>解决办法有三种：</p>\n<ul>\n<li>禁用 <code class=\"language-text\">HTTP Agent</code>，即在在调用 <code class=\"language-text\">get</code> 方法时额外添加参数 <code class=\"language-text\">agent: false</code></li>\n<li>设置 <code class=\"language-text\">http</code> 对象的全局 socket 数量上限</li>\n<li>在请求返回的时候及时主动断开连接</li>\n</ul>\n<p>来源：<a href=\"http://blog.csdn.net/bolg_hero/article/details/49427677\">http://blog.csdn.net/bolg_hero/article/details/49427677</a></p>\n</blockquote>\n<h3>Child Process 模块</h3>\n<p><code class=\"language-text\">exec</code> 方法用于执行bash 命令，它的参数是一个命令字符串。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> exec <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'chile_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>exec<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> ls <span class=\"token operator\">=</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ls -l'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> stdout<span class=\"token punctuation\">,</span> stderr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stdout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>由于标准输出和标准错误都是流对象（stream），<strong>可以监听data事件</strong>，因此上面的代码也可以写成下面这样。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> exec <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>exec<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> child <span class=\"token operator\">=</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ls -l'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nchild<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stdout: '</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stderr: '</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'close'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'closing code: '</span> <span class=\"token operator\">+</span> code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>异步编程</h3>\n<p>如果数组成员可以并行处理，但后续代码仍然需要所有数组成员处理完毕后才能执行的话，则异步代码会调整成以下形式：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">i<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>count <span class=\"token operator\">===</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// All array items have processed.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>以上代码并行处理所有数组成员，并通过计数器变量来判断什么时候所有数组成员都处理完毕了。</p>\n<h2>HTTP 协议</h2>\n<h3>请求报文</h3>\n<p>规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;method&gt; &lt;request-URL&gt; &lt;version&gt;\n&lt;headers&gt;\n\n&lt;entity-body&gt;</code></pre></div>\n<h3>响应报文</h3>\n<p>HTTP 响应与 HTTP 请求相似，HTTP响应也由3个部分构成，分别是：</p>\n<ul>\n<li>状态行</li>\n<li>响应头(Response Header)</li>\n<li>响应正文</li>\n</ul>\n<p>状态行由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔。</p>\n<h3>URL</h3>\n<p>HTTP URL (URL是一种特殊类型的URI，包含了用于查找某个资源的足够的信息)的格式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">http://host[&quot;:&quot;port][abs_path]</code></pre></div>\n<ul>\n<li>http 表示要通过HTTP 协议来定位网络资源</li>\n<li>host 表示合法的Internet 主机域名或者IP 地址</li>\n<li>port 指定一个端口号，为空则使用缺省端口80</li>\n<li>abs_path 指定请求资源的URI</li>\n</ul>\n<blockquote>\n<p>如果URL中没有给出abs_path，那么当它作为请求URI 时，必须以“/”的形式给出，通常这个工作浏览器自动帮我们完成。</p>\n</blockquote>\n<h3>在浏览器中输入URL 后的流程</h3>\n<ol>\n<li>浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址</li>\n<li>解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接</li>\n<li>浏览器发出读取文件（URL 中域名后面部分对应的文件）的HTTP 请求，该请求报文作为TCP 三次握手的第三个报文的数据发送给服务器</li>\n<li>服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器</li>\n<li>释放TCP连接</li>\n<li>浏览器得到 html 文本并显示内容</li>\n</ol>\n<h3>参考</h3>\n<p>7天学会Node.js：<a href=\"http://nqdeng.github.io/7-days-nodejs/\">http://nqdeng.github.io/7-days-nodejs/</a></p>","frontmatter":{"title":"Node 基础知识点总结","date":"July 11, 2017","description":""}}},"pageContext":{"slug":"/20170712-summary-of-basic-nodejs-knowledge/","previous":{"fields":{"slug":"/20170712-javascript-notes/","path":"/post/20170712-javascript-notes/"},"frontmatter":{"title":"JavaScript 高级程序设计学习笔记"}},"next":{"fields":{"slug":"/20170712-knowledge-of-anyproxy/","path":"/post/20170712-knowledge-of-anyproxy/"},"frontmatter":{"title":"AnyProxy 知识点"}}}}}