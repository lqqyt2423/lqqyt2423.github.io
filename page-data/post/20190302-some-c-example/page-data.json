{"componentChunkName":"component---src-templates-blog-post-js","path":"/post/20190302-some-c-example/","result":{"data":{"site":{"siteMetadata":{"title":"lqqyt2423's blog"}},"markdownRemark":{"id":"6649ac3b-a536-5b70-b008-97b75a2dbdb6","excerpt":"打开或关闭文件 读和写文件 sizet --- unsigned long\nssizet --- long RIO Robust I/O RIO 的无缓冲的输入输出函数 RIO 的带缓冲的输入函数        IP 地址 Unix 提供了下面这样的函数在网络和主机字节顺序间实现转换。 套接字地址结构 socket…","html":"<p><code class=\"language-text\">/1-导言/1.6.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token comment\">// 1-6</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d - at EOF\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/1-导言/1.7.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token comment\">// 1-7</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"EOF is %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/1-导言/a.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token comment\">// 打印华氏温度和摄氏温度对照表</span>\n<span class=\"token comment\">// c = (5/9) * (f-32)</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> fahr<span class=\"token punctuation\">,</span> celsius<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> lower<span class=\"token punctuation\">,</span> upper<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">;</span>\n\n  lower <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  upper <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n  step <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n  fahr <span class=\"token operator\">=</span> lower<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fahr <span class=\"token operator\">&lt;=</span> upper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    celsius <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>fahr<span class=\"token operator\">-</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t%d\\n\"</span><span class=\"token punctuation\">,</span> fahr<span class=\"token punctuation\">,</span> celsius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fahr <span class=\"token operator\">=</span> fahr <span class=\"token operator\">+</span> step<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/1-导言/b.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token comment\">// 打印华氏温度和摄氏温度对照表</span>\n<span class=\"token comment\">// c = (5/9) * (f-32)</span>\n<span class=\"token comment\">// 优化版本</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 浮点数</span>\n  <span class=\"token keyword\">float</span> fahr<span class=\"token punctuation\">,</span> celsius<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> lower<span class=\"token punctuation\">,</span> upper<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">;</span>\n\n  lower <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  upper <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n  step <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n  fahr <span class=\"token operator\">=</span> lower<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fahr <span class=\"token operator\">&lt;=</span> upper<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    celsius <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5.0</span><span class=\"token operator\">/</span><span class=\"token number\">9.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>fahr<span class=\"token operator\">-</span><span class=\"token number\">32.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 输出美观</span>\n    <span class=\"token comment\">// %3.0f 至少占3字符宽，不带小数点和小数部分</span>\n    <span class=\"token comment\">// %6.1f 至少占6字符宽，小数点后面有1位数字</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%3.0f %6.1f\\n\"</span><span class=\"token punctuation\">,</span> fahr<span class=\"token punctuation\">,</span> celsius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fahr <span class=\"token operator\">=</span> fahr <span class=\"token operator\">+</span> step<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/1-导言/c.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"># <span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token comment\">// 摄氏温度转华氏温度</span>\n<span class=\"token comment\">// f = 9*c / 5 + 32</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">float</span> fahr<span class=\"token punctuation\">,</span> celsius<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> lower<span class=\"token punctuation\">,</span> upper<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">;</span>\n\n  lower <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  upper <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n  step <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Celsius  Fahr\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  celsius <span class=\"token operator\">=</span> lower<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>celsius <span class=\"token operator\">&lt;=</span> upper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fahr <span class=\"token operator\">=</span> <span class=\"token number\">9.0</span> <span class=\"token operator\">*</span> celsius <span class=\"token operator\">/</span> <span class=\"token number\">5.0</span> <span class=\"token operator\">+</span> <span class=\"token number\">32.0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%3.0f     %6.1f\\n\"</span><span class=\"token punctuation\">,</span> celsius<span class=\"token punctuation\">,</span> fahr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    celsius <span class=\"token operator\">=</span> celsius <span class=\"token operator\">+</span> step<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/1-导言/copy.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n  c <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/1-导言/copy2.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/1-导言/d.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token comment\">// 打印华氏温度和摄氏温度对照表</span>\n<span class=\"token comment\">// c = (5/9) * (f-32)</span>\n<span class=\"token comment\">// 优化版本</span>\n<span class=\"token comment\">// for</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">float</span> fahr<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>fahr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> fahr <span class=\"token operator\">&lt;=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span> fahr <span class=\"token operator\">=</span> fahr <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%3.0f %6.1f\\n\"</span><span class=\"token punctuation\">,</span> fahr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">9.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>fahr <span class=\"token operator\">-</span> <span class=\"token number\">32.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/1-导言/e.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token comment\">// 打印华氏温度和摄氏温度对照表</span>\n<span class=\"token comment\">// c = (5/9) * (f-32)</span>\n<span class=\"token comment\">// 优化版本</span>\n<span class=\"token comment\">// for</span>\n<span class=\"token comment\">// 逆序</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">float</span> fahr<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>fahr <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span> fahr <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> fahr <span class=\"token operator\">=</span> fahr <span class=\"token operator\">-</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%3.0f %6.1f\\n\"</span><span class=\"token punctuation\">,</span> fahr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">9.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>fahr <span class=\"token operator\">-</span> <span class=\"token number\">32.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/1-导言/f.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> LOWER 0</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> UPPER 300</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> STEP 20</span>\n\n<span class=\"token comment\">// 打印华氏温度和摄氏温度对照表</span>\n<span class=\"token comment\">// c = (5/9) * (f-32)</span>\n<span class=\"token comment\">// 优化版本</span>\n<span class=\"token comment\">// for</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">float</span> fahr<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>fahr <span class=\"token operator\">=</span> LOWER<span class=\"token punctuation\">;</span> fahr <span class=\"token operator\">&lt;=</span> UPPER<span class=\"token punctuation\">;</span> fahr <span class=\"token operator\">=</span> fahr <span class=\"token operator\">+</span> STEP<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%3.0f %6.1f\\n\"</span><span class=\"token punctuation\">,</span> fahr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">9.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>fahr <span class=\"token operator\">-</span> <span class=\"token number\">32.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/1-导言/hello.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello, world\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/10/cpstdin.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n\n<span class=\"token comment\">// 使用 read 和 write 调用一次一个字节地从标准输入复制到标准输出</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>STDIN_FILENO<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>STDOUT_FILENO<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/10/csapp.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> RIO_BUFSIZE 8192</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> rio_fd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Descriptor for this internal buf</span>\n  <span class=\"token keyword\">int</span> rio_cnt<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Unread bytes in internal buf</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>rio_bufptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Next unread byte in internal buf</span>\n  <span class=\"token keyword\">char</span> rio_buf<span class=\"token punctuation\">[</span>RIO_BUFSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Internal buffer</span>\n<span class=\"token punctuation\">}</span> rio_t<span class=\"token punctuation\">;</span>\n\nssize_t <span class=\"token function\">rio_readn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t nleft <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  ssize_t nread<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> usrbuf<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nleft <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nread <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> bufp<span class=\"token punctuation\">,</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Interrupted by sig handler return and call read() again</span>\n      <span class=\"token comment\">// 被应用信号处理程序的返回终端，手动重启</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">==</span> EINTR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nread <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// errno set by read()</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nread <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// EOF</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    nleft <span class=\"token operator\">-=</span> nread<span class=\"token punctuation\">;</span>\n    bufp <span class=\"token operator\">+=</span> nread<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Return >= 0</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nssize_t <span class=\"token function\">rio_writen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t nleft <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  ssize_t nwritten<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> usrbuf<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nleft <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nwritten <span class=\"token operator\">=</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> bufp<span class=\"token punctuation\">,</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">==</span> EINTR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nwritten <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    nleft <span class=\"token operator\">-=</span> nwritten<span class=\"token punctuation\">;</span>\n    bufp <span class=\"token operator\">+=</span> nwritten<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">rio_readinitb</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  rp<span class=\"token operator\">-></span>rio_fd <span class=\"token operator\">=</span> fd<span class=\"token punctuation\">;</span>\n  rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  rp<span class=\"token operator\">-></span>rio_bufptr <span class=\"token operator\">=</span> rp<span class=\"token operator\">-></span>rio_buf<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 内部的 rio_read 函数</span>\n<span class=\"token keyword\">static</span> ssize_t <span class=\"token function\">rio_read</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Refill if buf is empty</span>\n    rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_fd<span class=\"token punctuation\">,</span> rp<span class=\"token operator\">-></span>rio_buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">!=</span> EINTR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// EOF</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        rp<span class=\"token operator\">-></span>rio_bufptr <span class=\"token operator\">=</span> rp<span class=\"token operator\">-></span>rio_buf<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Reset buffer ptr</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Copy min(n, rp->rio_cnt) bytes from internal buf to user buf</span>\n  cnt <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span>\n    cnt <span class=\"token operator\">=</span> rp<span class=\"token operator\">-></span>rio_cnt<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>usrbuf<span class=\"token punctuation\">,</span> rp<span class=\"token operator\">-></span>rio_bufptr<span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  rp<span class=\"token operator\">-></span>rio_bufptr <span class=\"token operator\">+=</span> cnt<span class=\"token punctuation\">;</span>\n  rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">-=</span> cnt<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nssize_t <span class=\"token function\">rio_readlineb</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t maxlen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> rc<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> usrbuf<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> maxlen<span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rc <span class=\"token operator\">=</span> <span class=\"token function\">rio_read</span><span class=\"token punctuation\">(</span>rp<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">*</span>bufp<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rc <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EOF, no data read</span>\n      <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EOF, some data was read</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nssize_t <span class=\"token function\">rio_readnb</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t nleft <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  ssize_t nread<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> usrbuf<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nleft <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nread <span class=\"token operator\">=</span> <span class=\"token function\">rio_read</span><span class=\"token punctuation\">(</span>rp<span class=\"token punctuation\">,</span> bufp<span class=\"token punctuation\">,</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nread <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    nleft <span class=\"token operator\">-=</span> nread<span class=\"token punctuation\">;</span>\n    bufp <span class=\"token operator\">+=</span> nread<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/10/readme.md</code></p>\n<p>打开或关闭文件</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">,</span> mode_t mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：若成功则为新文件描述符，若出错为 -1</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：若成功则为 0，若出错则为 -1</span></code></pre></div>\n<p>读和写文件</p>\n<p>size<em>t --- unsigned long\nssize</em>t --- long</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n\nssize_t <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：若成功则为读的字节数，若 EOF 则为 0，若出错为 -1</span>\n\nssize_t <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：若成功则为写的字节数，若出错则为 -1</span></code></pre></div>\n<p>RIO Robust I/O</p>\n<p>RIO 的无缓冲的输入输出函数</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">ssize_t <span class=\"token function\">rio_readn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nssize_t <span class=\"token function\">rio_writen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：若成功则为传送的字节数，若 EOF 则为 0，若出错则为 -1</span></code></pre></div>\n<p>RIO 的带缓冲的输入函数</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">rio_readinitb</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nssize_t <span class=\"token function\">rio_readlineb</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t maxlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nssize_t <span class=\"token function\">rio_readnb</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：若成功则为读的字节数，若 EOF 则为 0，若出错则为 -1</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/11/csapp.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"csapp.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> RIO_BUFSIZE 8192</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> rio_fd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Descriptor for this internal buf</span>\n  <span class=\"token keyword\">int</span> rio_cnt<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Unread bytes in internal buf</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>rio_bufptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Next unread byte in internal buf</span>\n  <span class=\"token keyword\">char</span> rio_buf<span class=\"token punctuation\">[</span>RIO_BUFSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Internal buffer</span>\n<span class=\"token punctuation\">}</span> rio_t<span class=\"token punctuation\">;</span>\n\nssize_t <span class=\"token function\">rio_readn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t nleft <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  ssize_t nread<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> usrbuf<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nleft <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nread <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> bufp<span class=\"token punctuation\">,</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Interrupted by sig handler return and call read() again</span>\n      <span class=\"token comment\">// 被应用信号处理程序的返回终端，手动重启</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">==</span> EINTR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nread <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// errno set by read()</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nread <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// EOF</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    nleft <span class=\"token operator\">-=</span> nread<span class=\"token punctuation\">;</span>\n    bufp <span class=\"token operator\">+=</span> nread<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Return >= 0</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nssize_t <span class=\"token function\">rio_writen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t nleft <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  ssize_t nwritten<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> usrbuf<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nleft <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nwritten <span class=\"token operator\">=</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> bufp<span class=\"token punctuation\">,</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">==</span> EINTR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nwritten <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    nleft <span class=\"token operator\">-=</span> nwritten<span class=\"token punctuation\">;</span>\n    bufp <span class=\"token operator\">+=</span> nwritten<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">rio_readinitb</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  rp<span class=\"token operator\">-></span>rio_fd <span class=\"token operator\">=</span> fd<span class=\"token punctuation\">;</span>\n  rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  rp<span class=\"token operator\">-></span>rio_bufptr <span class=\"token operator\">=</span> rp<span class=\"token operator\">-></span>rio_buf<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 内部的 rio_read 函数</span>\n<span class=\"token keyword\">static</span> ssize_t <span class=\"token function\">rio_read</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Refill if buf is empty</span>\n    rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_fd<span class=\"token punctuation\">,</span> rp<span class=\"token operator\">-></span>rio_buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">!=</span> EINTR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// EOF</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        rp<span class=\"token operator\">-></span>rio_bufptr <span class=\"token operator\">=</span> rp<span class=\"token operator\">-></span>rio_buf<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Reset buffer ptr</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Copy min(n, rp->rio_cnt) bytes from internal buf to user buf</span>\n  cnt <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span>\n    cnt <span class=\"token operator\">=</span> rp<span class=\"token operator\">-></span>rio_cnt<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>usrbuf<span class=\"token punctuation\">,</span> rp<span class=\"token operator\">-></span>rio_bufptr<span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  rp<span class=\"token operator\">-></span>rio_bufptr <span class=\"token operator\">+=</span> cnt<span class=\"token punctuation\">;</span>\n  rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">-=</span> cnt<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nssize_t <span class=\"token function\">rio_readlineb</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t maxlen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> rc<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> usrbuf<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> maxlen<span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rc <span class=\"token operator\">=</span> <span class=\"token function\">rio_read</span><span class=\"token punctuation\">(</span>rp<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">*</span>bufp<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rc <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EOF, no data read</span>\n      <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EOF, some data was read</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nssize_t <span class=\"token function\">rio_readnb</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t nleft <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  ssize_t nread<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> usrbuf<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nleft <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nread <span class=\"token operator\">=</span> <span class=\"token function\">rio_read</span><span class=\"token punctuation\">(</span>rp<span class=\"token punctuation\">,</span> bufp<span class=\"token punctuation\">,</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nread <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    nleft <span class=\"token operator\">-=</span> nread<span class=\"token punctuation\">;</span>\n    bufp <span class=\"token operator\">+=</span> nread<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// 11</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">open_clientfd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>hostname<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>port<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> clientfd<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span> hints<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>listp<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// get a list of potential server addresses</span>\n  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>hints<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  hints<span class=\"token punctuation\">.</span>ai_socktype <span class=\"token operator\">=</span> SOCK_STREAM<span class=\"token punctuation\">;</span> <span class=\"token comment\">// open a connection</span>\n  hints<span class=\"token punctuation\">.</span>ai_flags <span class=\"token operator\">=</span> AI_NUMERICSERV<span class=\"token punctuation\">;</span> <span class=\"token comment\">// using a numeric port arg</span>\n  hints<span class=\"token punctuation\">.</span>ai_flags <span class=\"token operator\">|=</span> AI_ADDRCONFIG<span class=\"token punctuation\">;</span> <span class=\"token comment\">// recommender for connections</span>\n  <span class=\"token function\">getaddrinfo</span><span class=\"token punctuation\">(</span>hostname<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hints<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>listp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// walk the list for one that we can successfully connect to</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> listp<span class=\"token punctuation\">;</span> p<span class=\"token punctuation\">;</span> p <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>ai_next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// create a socket descriptor</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>clientfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>ai_family<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_socktype<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// socket failed, try the next</span>\n\n    <span class=\"token comment\">// connect to the server</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>clientfd<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_addr<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_addrlen<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// success</span>\n\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>clientfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// connect failed, try another</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// clean up</span>\n  <span class=\"token function\">freeaddrinfo</span><span class=\"token punctuation\">(</span>listp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// all connects failed</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token comment\">// the last connect succeeded</span>\n    <span class=\"token keyword\">return</span> clientfd<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">open_listenfd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>port<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span> hints<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>listp<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> listenfd<span class=\"token punctuation\">,</span> optval <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// get a list of potential server addresses</span>\n  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>hints<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  hints<span class=\"token punctuation\">.</span>ai_socktype <span class=\"token operator\">=</span> SOCK_STREAM<span class=\"token punctuation\">;</span> <span class=\"token comment\">// accept connection</span>\n  hints<span class=\"token punctuation\">.</span>ai_flags <span class=\"token operator\">=</span> AI_PASSIVE <span class=\"token operator\">|</span> AI_ADDRCONFIG<span class=\"token punctuation\">;</span> <span class=\"token comment\">// on any IP address</span>\n  hints<span class=\"token punctuation\">.</span>ai_flags <span class=\"token operator\">|=</span> AI_NUMERICSERV<span class=\"token punctuation\">;</span> <span class=\"token comment\">// using port number</span>\n  <span class=\"token function\">getaddrinfo</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hints<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>listp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// walk the list for one that we can bind to</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> listp <span class=\"token punctuation\">;</span> p<span class=\"token punctuation\">;</span> p <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>ai_next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// create a socket descriptor</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>listenfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>ai_family<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_socktype<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// socket failed, try the next</span>\n\n    <span class=\"token comment\">// eliminates \"address already in use\" error from bind</span>\n    <span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>optval<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// bind the descriptor to the address</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_addr<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_addrlen<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// success</span>\n\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bind failed, try the next</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// clean up</span>\n  <span class=\"token function\">freeaddrinfo</span><span class=\"token punctuation\">(</span>listp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// no address worked</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// make it a listening socket ready to accept connection requests</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">,</span> LISTENQ<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> listenfd<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/11/csapp.h</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netdb.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> RIO_BUFSIZE 8192</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> MAXLINE 100</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> LISTENQ 1024</span>\n\n<span class=\"token comment\">// Unix-style error</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">unix_error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s: %s\\n\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\npid_t <span class=\"token function\">Fork</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  pid_t pid<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pid <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">unix_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fork error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> pid<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> rio_fd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Descriptor for this internal buf</span>\n  <span class=\"token keyword\">int</span> rio_cnt<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Unread bytes in internal buf</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>rio_bufptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Next unread byte in internal buf</span>\n  <span class=\"token keyword\">char</span> rio_buf<span class=\"token punctuation\">[</span>RIO_BUFSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Internal buffer</span>\n<span class=\"token punctuation\">}</span> rio_t<span class=\"token punctuation\">;</span>\n\nssize_t <span class=\"token function\">rio_readn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t nleft <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  ssize_t nread<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> usrbuf<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nleft <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nread <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> bufp<span class=\"token punctuation\">,</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Interrupted by sig handler return and call read() again</span>\n      <span class=\"token comment\">// 被应用信号处理程序的返回终端，手动重启</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">==</span> EINTR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nread <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// errno set by read()</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nread <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// EOF</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    nleft <span class=\"token operator\">-=</span> nread<span class=\"token punctuation\">;</span>\n    bufp <span class=\"token operator\">+=</span> nread<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Return >= 0</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nssize_t <span class=\"token function\">rio_writen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t nleft <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  ssize_t nwritten<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> usrbuf<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nleft <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nwritten <span class=\"token operator\">=</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> bufp<span class=\"token punctuation\">,</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">==</span> EINTR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nwritten <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    nleft <span class=\"token operator\">-=</span> nwritten<span class=\"token punctuation\">;</span>\n    bufp <span class=\"token operator\">+=</span> nwritten<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">rio_readinitb</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  rp<span class=\"token operator\">-></span>rio_fd <span class=\"token operator\">=</span> fd<span class=\"token punctuation\">;</span>\n  rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  rp<span class=\"token operator\">-></span>rio_bufptr <span class=\"token operator\">=</span> rp<span class=\"token operator\">-></span>rio_buf<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 内部的 rio_read 函数</span>\n<span class=\"token keyword\">static</span> ssize_t <span class=\"token function\">rio_read</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Refill if buf is empty</span>\n    rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_fd<span class=\"token punctuation\">,</span> rp<span class=\"token operator\">-></span>rio_buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">!=</span> EINTR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// EOF</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        rp<span class=\"token operator\">-></span>rio_bufptr <span class=\"token operator\">=</span> rp<span class=\"token operator\">-></span>rio_buf<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Reset buffer ptr</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Copy min(n, rp->rio_cnt) bytes from internal buf to user buf</span>\n  cnt <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span>\n    cnt <span class=\"token operator\">=</span> rp<span class=\"token operator\">-></span>rio_cnt<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>usrbuf<span class=\"token punctuation\">,</span> rp<span class=\"token operator\">-></span>rio_bufptr<span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  rp<span class=\"token operator\">-></span>rio_bufptr <span class=\"token operator\">+=</span> cnt<span class=\"token punctuation\">;</span>\n  rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">-=</span> cnt<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nssize_t <span class=\"token function\">rio_readlineb</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t maxlen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> rc<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> usrbuf<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> maxlen<span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rc <span class=\"token operator\">=</span> <span class=\"token function\">rio_read</span><span class=\"token punctuation\">(</span>rp<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">*</span>bufp<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rc <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EOF, no data read</span>\n      <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EOF, some data was read</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nssize_t <span class=\"token function\">rio_readnb</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t nleft <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  ssize_t nread<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> usrbuf<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nleft <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nread <span class=\"token operator\">=</span> <span class=\"token function\">rio_read</span><span class=\"token punctuation\">(</span>rp<span class=\"token punctuation\">,</span> bufp<span class=\"token punctuation\">,</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nread <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    nleft <span class=\"token operator\">-=</span> nread<span class=\"token punctuation\">;</span>\n    bufp <span class=\"token operator\">+=</span> nread<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// 11</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">open_clientfd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>hostname<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>port<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> clientfd<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span> hints<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>listp<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// get a list of potential server addresses</span>\n  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>hints<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  hints<span class=\"token punctuation\">.</span>ai_socktype <span class=\"token operator\">=</span> SOCK_STREAM<span class=\"token punctuation\">;</span> <span class=\"token comment\">// open a connection</span>\n  hints<span class=\"token punctuation\">.</span>ai_flags <span class=\"token operator\">=</span> AI_NUMERICSERV<span class=\"token punctuation\">;</span> <span class=\"token comment\">// using a numeric port arg</span>\n  hints<span class=\"token punctuation\">.</span>ai_flags <span class=\"token operator\">|=</span> AI_ADDRCONFIG<span class=\"token punctuation\">;</span> <span class=\"token comment\">// recommender for connections</span>\n  <span class=\"token function\">getaddrinfo</span><span class=\"token punctuation\">(</span>hostname<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hints<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>listp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// walk the list for one that we can successfully connect to</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> listp<span class=\"token punctuation\">;</span> p<span class=\"token punctuation\">;</span> p <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>ai_next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// create a socket descriptor</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>clientfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>ai_family<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_socktype<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// socket failed, try the next</span>\n\n    <span class=\"token comment\">// connect to the server</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>clientfd<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_addr<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_addrlen<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// success</span>\n\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>clientfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// connect failed, try another</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// clean up</span>\n  <span class=\"token function\">freeaddrinfo</span><span class=\"token punctuation\">(</span>listp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// all connects failed</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token comment\">// the last connect succeeded</span>\n    <span class=\"token keyword\">return</span> clientfd<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">open_listenfd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>port<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span> hints<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>listp<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> listenfd<span class=\"token punctuation\">,</span> optval <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// get a list of potential server addresses</span>\n  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>hints<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  hints<span class=\"token punctuation\">.</span>ai_socktype <span class=\"token operator\">=</span> SOCK_STREAM<span class=\"token punctuation\">;</span> <span class=\"token comment\">// accept connection</span>\n  hints<span class=\"token punctuation\">.</span>ai_flags <span class=\"token operator\">=</span> AI_PASSIVE <span class=\"token operator\">|</span> AI_ADDRCONFIG<span class=\"token punctuation\">;</span> <span class=\"token comment\">// on any IP address</span>\n  hints<span class=\"token punctuation\">.</span>ai_flags <span class=\"token operator\">|=</span> AI_NUMERICSERV<span class=\"token punctuation\">;</span> <span class=\"token comment\">// using port number</span>\n  <span class=\"token function\">getaddrinfo</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hints<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>listp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// walk the list for one that we can bind to</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> listp <span class=\"token punctuation\">;</span> p<span class=\"token punctuation\">;</span> p <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>ai_next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// create a socket descriptor</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>listenfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>ai_family<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_socktype<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// socket failed, try the next</span>\n\n    <span class=\"token comment\">// eliminates \"address already in use\" error from bind</span>\n    <span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>optval<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// bind the descriptor to the address</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_addr<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_addrlen<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// success</span>\n\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bind failed, try the next</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// clean up</span>\n  <span class=\"token function\">freeaddrinfo</span><span class=\"token punctuation\">(</span>listp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// no address worked</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// make it a listening socket ready to accept connection requests</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">,</span> LISTENQ<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> listenfd<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> connfd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t n<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span>MAXLINE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  rio_t rio<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">rio_readinitb</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rio<span class=\"token punctuation\">,</span> connfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> <span class=\"token function\">rio_readlineb</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rio<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> MAXLINE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"server received %d bytes\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">rio_writen</span><span class=\"token punctuation\">(</span>connfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/11/echo.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"csapp.h\"</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> connfd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t n<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span>MAXLINE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  rio_t rio<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">rio_readinitb</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rio<span class=\"token punctuation\">,</span> connfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> <span class=\"token function\">rio_readlineb</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rio<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> MAXLINE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"server received %d bytes\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">rio_writen</span><span class=\"token punctuation\">(</span>connfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/11/echoclient.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"csapp.h\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> clientfd<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>host<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>port<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">[</span>MAXLINE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  rio_t rio<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">!=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"usage: %s &lt;host> &lt;port>\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  host <span class=\"token operator\">=</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  port <span class=\"token operator\">=</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  clientfd <span class=\"token operator\">=</span> <span class=\"token function\">open_clientfd</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">rio_readinitb</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rio<span class=\"token punctuation\">,</span> clientfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> MAXLINE<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">rio_writen</span><span class=\"token punctuation\">(</span>clientfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">rio_readlineb</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rio<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> MAXLINE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>clientfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/11/echoserveri.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"csapp.h\"</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> connfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> listenfd<span class=\"token punctuation\">,</span> connfd<span class=\"token punctuation\">;</span>\n  socklen_t clientlen<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_storage</span> clientaddr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// enough space for any address</span>\n  <span class=\"token keyword\">char</span> client_hostname<span class=\"token punctuation\">[</span>MAXLINE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> client_port<span class=\"token punctuation\">[</span>MAXLINE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"usage: %s &lt;port>\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  listenfd <span class=\"token operator\">=</span> <span class=\"token function\">open_listenfd</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    clientlen <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_storage</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    connfd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>clientaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>clientlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">getnameinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>clientaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> clientlen<span class=\"token punctuation\">,</span> client_hostname<span class=\"token punctuation\">,</span> MAXLINE<span class=\"token punctuation\">,</span> client_port<span class=\"token punctuation\">,</span> MAXLINE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connected to (%s %s)\\n\"</span><span class=\"token punctuation\">,</span> client_hostname<span class=\"token punctuation\">,</span> client_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span>connfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>connfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/11/hostinfo.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"csapp.h\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>listp<span class=\"token punctuation\">,</span> hints<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span>MAXLINE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> rc<span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"usage: %s &lt;domain name>\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// get a list of addrinfo records</span>\n  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>hints<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  hints<span class=\"token punctuation\">.</span>ai_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span> <span class=\"token comment\">// IPv4 only</span>\n  hints<span class=\"token punctuation\">.</span>ai_socktype <span class=\"token operator\">=</span> SOCK_STREAM<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Connections only</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rc <span class=\"token operator\">=</span> <span class=\"token function\">getaddrinfo</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hints<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>listp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"getaddrinfo error: %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">gai_strerror</span><span class=\"token punctuation\">(</span>rc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Walk the list and display each IP address</span>\n  flags <span class=\"token operator\">=</span> NI_NUMERICHOST<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Display address string instead of domain name</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> listp<span class=\"token punctuation\">;</span> p<span class=\"token punctuation\">;</span> p <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>ai_next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getnameinfo</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>ai_addr<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_addrlen<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> MAXLINE<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Clean up</span>\n  <span class=\"token function\">freeaddrinfo</span><span class=\"token punctuation\">(</span>listp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/11/readme.md</code></p>\n<p>IP 地址</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// IP address structure</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">in_addr</span> <span class=\"token punctuation\">{</span>\n  uint32_t s_addr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Address in netword byte order (big-endian)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Unix 提供了下面这样的函数在网络和主机字节顺序间实现转换。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span>\n\nuint32_t <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>uint32_t hostlong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuint16_t <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>uint16_t hostshort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：按照网络字节顺序的值</span>\n\nuint32_t <span class=\"token function\">ntohl</span><span class=\"token punctuation\">(</span>uint32_t netlong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuint16_t <span class=\"token function\">ntohs</span><span class=\"token punctuation\">(</span>uint16_t netshort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：按照主机字节顺序的值</span></code></pre></div>\n<p>套接字地址结构</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// IP socket address structure</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> <span class=\"token punctuation\">{</span>\n  uint16_t sin_family<span class=\"token punctuation\">;</span>\n  uint16_t sin_port<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">in_addr</span> sin_addr<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> sin_zero<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Generic socket address structure</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token punctuation\">{</span>\n  uint16_t sa_family<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> sa_data<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>socket 函数</p>\n<p>客户端和服务器使用 socket 函数来创建一个套接字描述符。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> domain<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：若成功则为非负描述符，若出错则为 -1</span></code></pre></div>\n<p>connect 函数</p>\n<p>客户端通过调用 connect 函数来建立和服务器的连接。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> clientfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>addr<span class=\"token punctuation\">,</span> socklen_t addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：若成功则为 0，若出错则为 -1</span></code></pre></div>\n<p>connect 函数会阻塞</p>\n<p>服务器：bind、listen 和 accept</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>addr<span class=\"token punctuation\">,</span> socklen_t addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：若成功则为 0，若出错则为 -1</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> backlog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：若成功则为 0，若出错则为 -1</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> listenfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：若成功则为非负连接描述符，若出错则为 -1</span></code></pre></div>\n<p>getaddrinfo 函数</p>\n<p>将主机名、主机地址、服务名和端口号的字符串表示转化成套接字地址结构。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netdb.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">getaddrinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>host<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>service<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span> <span class=\"token operator\">*</span>hints<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：如果成功则为 0，如果错误则为非零的错误代码</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">freeaddrinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span> <span class=\"token operator\">*</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回： 无</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">gai_strerror</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> errcode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：错误消息</span></code></pre></div>\n<p>addrinfo 结构</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> ai_flags<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> ai_family<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> ai_socktype<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> ai_protocol<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>ai_canonname<span class=\"token punctuation\">;</span>\n  size_t ai_addrlen<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>ai_addr<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span> <span class=\"token operator\">*</span>ai_next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>getnameinfo 与 getaddrinfo 相反</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netdb.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">getnameinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>sa<span class=\"token punctuation\">,</span> socklen_t salen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>host<span class=\"token punctuation\">,</span> size_t hostlen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> service<span class=\"token punctuation\">,</span> size_t servlen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：如果成功则为 0，如果错误则为非零的错误代码</span></code></pre></div>\n<p>套接字接口辅助函数</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">open_clientfd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>hostname<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">open_listenfd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：若成功则为描述符，若出错则为 -1</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/7-link/main.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/7-link/readme.md</code></p>\n<p>gcc -Og -o prog main.c sum.c</p>\n<hr>\n<p><code class=\"language-text\">/deep/7-link/sum.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    s <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/8/csapp.h</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h></span></span>\n\n<span class=\"token comment\">// Unix-style error</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">unix_error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s: %s\\n\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\npid_t <span class=\"token function\">Fork</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  pid_t pid<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pid <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">unix_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fork error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> pid<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/8/fork.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  pid_t pid<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  pid <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 子进程</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pid <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child : x=%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 父进程</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"parent: x=%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">--</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/8/get_pid.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 当前进程</span>\n  pid_t p <span class=\"token operator\">=</span> <span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pid: %d\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 父进程</span>\n  p <span class=\"token operator\">=</span> <span class=\"token function\">getppid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ppid: %d\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 进程组</span>\n  p <span class=\"token operator\">=</span> <span class=\"token function\">getpgrp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pgrp: %d\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/8/hello.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello, world\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">_exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/8/kill.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"csapp.h\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  pid_t pid<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Child sleeps until SIGKILL signal received, then dies</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pid <span class=\"token operator\">=</span> <span class=\"token function\">Fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Wait for a signal to arrive</span>\n    <span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"control should never reach here!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Parent sends a SIGKILL signal to a child</span>\n  <span class=\"token function\">kill</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span> SIGKILL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/8/sigint.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"csapp.h\"</span></span>\n\n<span class=\"token comment\">// 捕获键盘 Ctrl+C 发送的 SIGINT 信号</span>\n\n<span class=\"token comment\">// SIGINT handler</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">sigint_handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Caught SIGINT!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Install the SIGINT handler</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>SIGINT<span class=\"token punctuation\">,</span> sigint_handler<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SIG_ERR<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">unix_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"signal error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Wait for the receipt of a signal</span>\n  <span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/8/waitpid1.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"csapp.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> N 10</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> status<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n  pid_t pid<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 创建 N 个子进程</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pid <span class=\"token operator\">=</span> <span class=\"token function\">Fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 子进程退出</span>\n      <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 回收子进程，顺序不固定</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pid <span class=\"token operator\">=</span> <span class=\"token function\">waitpid</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>status<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">WIFEXITED</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child %d terminated normally with exit status=%d\\n\"</span><span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">,</span> <span class=\"token function\">WEXITSTATUS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child %d terminated abnormally\\n\"</span><span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 最后一次调用 waitpid 返回 -1，并设置 errno 为 ECHILD</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">!=</span> ECHILD<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">unix_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"waitpid error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/8/waitpid2.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"csapp.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> N 10</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> status<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n  pid_t pid<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> retpid<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 创建 N 个子进程</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 子进程退出</span>\n      <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 回收子进程，顺序固定</span>\n  i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>retpid <span class=\"token operator\">=</span> <span class=\"token function\">waitpid</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>status<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">WIFEXITED</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child %d terminated normally with exit status=%d\\n\"</span><span class=\"token punctuation\">,</span> retpid<span class=\"token punctuation\">,</span> <span class=\"token function\">WEXITSTATUS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child %d terminated abnormally\\n\"</span><span class=\"token punctuation\">,</span> retpid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 最后一次调用 waitpid 返回 -1，并设置 errno 为 ECHILD</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">!=</span> ECHILD<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">unix_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"waitpid error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/note.md</code></p>\n<h1>C程序设计语言</h1>\n<h2>1 - 导言</h2>\n<p>编译：cc hello.c</p>\n<p>执行：./a.out</p>\n<p><code class=\"language-text\">include &lt;stdio.h&gt;</code> 包含标准库的信息，告诉编译器在本程序中包含标准输入/输出库的信息。</p>\n<p>程序的起点为 main 函数</p>\n<p>main 函数不接收参数值</p>\n<p>用双引号括起来的字符序列称为<strong>字符串</strong>或<strong>字符常量</strong>。</p>\n<p>printf 函数不是C语言本身的一部分，仅是标准库函数中的一个函数。</p>\n<ul>\n<li>%3.0f 至少占3字符宽，不带小数点和小数部分</li>\n<li>%6.1f 至少占6字符宽，小数点后面有1位数字</li>\n<li>%d 十进制</li>\n<li>%f 浮点数</li>\n<li>%o 八进制</li>\n<li>%x 十六进制</li>\n<li>%c 字符</li>\n<li>%s 字符串</li>\n<li>%% %</li>\n</ul>\n<p><code class=\"language-text\">#define</code> 指令可以把符号名（符号变量）定义为一个特定的字符串：<code class=\"language-text\">#define 名字 替换文本</code>，指令末尾无分号。</p>\n<p>getchar() 和 putchar()</p>\n<ul>\n<li>getchar 从文本流中读入下一个输入字符，作为结果返回</li>\n<li>putchar 将打印一个字符</li>\n</ul>\n<p>EOF end of file 定义在头文件<code class=\"language-text\">&lt;stdio.h&gt;</code> 中，是一个<strong>整型数</strong>。与任何 char 类型的值都不相同。</p>\n<hr>\n<p><code class=\"language-text\">/tmp/main.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">multstore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">long</span> d<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">multstore</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2 * 3 --> %ld\\n\"</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">long</span> <span class=\"token function\">mult2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">long</span> s <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/tmp/mstore.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">long</span> <span class=\"token function\">mult2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">multstore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span>dest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">long</span> t <span class=\"token operator\">=</span> <span class=\"token function\">mult2</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span>dest <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/tmp/show_bytes.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token comment\">// 使用强制类型转换来访问和打印不同程序对象的字节表示</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>byte_pointer<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_bytes</span><span class=\"token punctuation\">(</span>byte_pointer start<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 因为 char 类型的指针每次是按照字节加 1</span>\n  <span class=\"token comment\">// 所以可以打印出存储在相应地址的字节</span>\n\n  <span class=\"token comment\">// pa[i] 与 *(pa+i) 是等价的</span>\n  <span class=\"token comment\">// 一个通过数组和下标实现的表达式可等价地通过指针和偏移量实现</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 数组形式</span>\n    <span class=\"token comment\">// start[i] 表示读取以 start 指向的位置为起始的第 i 个位置处的字节</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" %.2x\"</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 指针形式</span>\n    <span class=\"token comment\">// printf(\" %.2x\", *start++);</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 强制类型转换</span>\n  <span class=\"token comment\">// 并不会改变真实的指针，而是告诉编译器以新的数据类型来看待被指向的数据</span>\n  <span class=\"token function\">show_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>byte_pointer<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_float</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">show_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>byte_pointer<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 指向任何对象的指针都可以转换为 void * 类型，且不会丢失信息</span>\n<span class=\"token comment\">// 如果将结果再转换为初始指针类型，则可以恢复初始指针</span>\n<span class=\"token comment\">// ANSI C 使用类型 void * 代替 char * 作为通用指针的类型</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_pointer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">show_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>byte_pointer<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test_show_bytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> ival <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 39 30 00 00 => 小端法</span>\n  <span class=\"token function\">show_int</span><span class=\"token punctuation\">(</span>ival<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">show_float</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>ival<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">show_pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ival<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 0x00003039</span>\n  <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">12345</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">test_show_bytes</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">show_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>byte_pointer<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span><span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/tmp.md</code></p>\n<p><code class=\"language-text\">/1-导言/1.6.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token comment\">// 1-6</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d - at EOF\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/1-导言/1.7.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token comment\">// 1-7</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"EOF is %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/1-导言/a.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token comment\">// 打印华氏温度和摄氏温度对照表</span>\n<span class=\"token comment\">// c = (5/9) * (f-32)</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> fahr<span class=\"token punctuation\">,</span> celsius<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> lower<span class=\"token punctuation\">,</span> upper<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">;</span>\n\n  lower <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  upper <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n  step <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n  fahr <span class=\"token operator\">=</span> lower<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fahr <span class=\"token operator\">&lt;=</span> upper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    celsius <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>fahr<span class=\"token operator\">-</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t%d\\n\"</span><span class=\"token punctuation\">,</span> fahr<span class=\"token punctuation\">,</span> celsius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fahr <span class=\"token operator\">=</span> fahr <span class=\"token operator\">+</span> step<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/1-导言/b.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token comment\">// 打印华氏温度和摄氏温度对照表</span>\n<span class=\"token comment\">// c = (5/9) * (f-32)</span>\n<span class=\"token comment\">// 优化版本</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 浮点数</span>\n  <span class=\"token keyword\">float</span> fahr<span class=\"token punctuation\">,</span> celsius<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> lower<span class=\"token punctuation\">,</span> upper<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">;</span>\n\n  lower <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  upper <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n  step <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n  fahr <span class=\"token operator\">=</span> lower<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fahr <span class=\"token operator\">&lt;=</span> upper<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    celsius <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5.0</span><span class=\"token operator\">/</span><span class=\"token number\">9.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>fahr<span class=\"token operator\">-</span><span class=\"token number\">32.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 输出美观</span>\n    <span class=\"token comment\">// %3.0f 至少占3字符宽，不带小数点和小数部分</span>\n    <span class=\"token comment\">// %6.1f 至少占6字符宽，小数点后面有1位数字</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%3.0f %6.1f\\n\"</span><span class=\"token punctuation\">,</span> fahr<span class=\"token punctuation\">,</span> celsius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fahr <span class=\"token operator\">=</span> fahr <span class=\"token operator\">+</span> step<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/1-导言/c.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"># <span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token comment\">// 摄氏温度转华氏温度</span>\n<span class=\"token comment\">// f = 9*c / 5 + 32</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">float</span> fahr<span class=\"token punctuation\">,</span> celsius<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> lower<span class=\"token punctuation\">,</span> upper<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">;</span>\n\n  lower <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  upper <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n  step <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Celsius  Fahr\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  celsius <span class=\"token operator\">=</span> lower<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>celsius <span class=\"token operator\">&lt;=</span> upper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fahr <span class=\"token operator\">=</span> <span class=\"token number\">9.0</span> <span class=\"token operator\">*</span> celsius <span class=\"token operator\">/</span> <span class=\"token number\">5.0</span> <span class=\"token operator\">+</span> <span class=\"token number\">32.0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%3.0f     %6.1f\\n\"</span><span class=\"token punctuation\">,</span> celsius<span class=\"token punctuation\">,</span> fahr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    celsius <span class=\"token operator\">=</span> celsius <span class=\"token operator\">+</span> step<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/1-导言/copy.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n  c <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/1-导言/copy2.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/1-导言/d.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token comment\">// 打印华氏温度和摄氏温度对照表</span>\n<span class=\"token comment\">// c = (5/9) * (f-32)</span>\n<span class=\"token comment\">// 优化版本</span>\n<span class=\"token comment\">// for</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">float</span> fahr<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>fahr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> fahr <span class=\"token operator\">&lt;=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span> fahr <span class=\"token operator\">=</span> fahr <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%3.0f %6.1f\\n\"</span><span class=\"token punctuation\">,</span> fahr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">9.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>fahr <span class=\"token operator\">-</span> <span class=\"token number\">32.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/1-导言/e.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token comment\">// 打印华氏温度和摄氏温度对照表</span>\n<span class=\"token comment\">// c = (5/9) * (f-32)</span>\n<span class=\"token comment\">// 优化版本</span>\n<span class=\"token comment\">// for</span>\n<span class=\"token comment\">// 逆序</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">float</span> fahr<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>fahr <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span> fahr <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> fahr <span class=\"token operator\">=</span> fahr <span class=\"token operator\">-</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%3.0f %6.1f\\n\"</span><span class=\"token punctuation\">,</span> fahr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">9.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>fahr <span class=\"token operator\">-</span> <span class=\"token number\">32.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/1-导言/f.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> LOWER 0</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> UPPER 300</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> STEP 20</span>\n\n<span class=\"token comment\">// 打印华氏温度和摄氏温度对照表</span>\n<span class=\"token comment\">// c = (5/9) * (f-32)</span>\n<span class=\"token comment\">// 优化版本</span>\n<span class=\"token comment\">// for</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">float</span> fahr<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>fahr <span class=\"token operator\">=</span> LOWER<span class=\"token punctuation\">;</span> fahr <span class=\"token operator\">&lt;=</span> UPPER<span class=\"token punctuation\">;</span> fahr <span class=\"token operator\">=</span> fahr <span class=\"token operator\">+</span> STEP<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%3.0f %6.1f\\n\"</span><span class=\"token punctuation\">,</span> fahr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">9.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>fahr <span class=\"token operator\">-</span> <span class=\"token number\">32.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/1-导言/hello.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello, world\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/10/cpstdin.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n\n<span class=\"token comment\">// 使用 read 和 write 调用一次一个字节地从标准输入复制到标准输出</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>STDIN_FILENO<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>STDOUT_FILENO<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/10/csapp.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> RIO_BUFSIZE 8192</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> rio_fd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Descriptor for this internal buf</span>\n  <span class=\"token keyword\">int</span> rio_cnt<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Unread bytes in internal buf</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>rio_bufptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Next unread byte in internal buf</span>\n  <span class=\"token keyword\">char</span> rio_buf<span class=\"token punctuation\">[</span>RIO_BUFSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Internal buffer</span>\n<span class=\"token punctuation\">}</span> rio_t<span class=\"token punctuation\">;</span>\n\nssize_t <span class=\"token function\">rio_readn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t nleft <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  ssize_t nread<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> usrbuf<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nleft <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nread <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> bufp<span class=\"token punctuation\">,</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Interrupted by sig handler return and call read() again</span>\n      <span class=\"token comment\">// 被应用信号处理程序的返回终端，手动重启</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">==</span> EINTR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nread <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// errno set by read()</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nread <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// EOF</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    nleft <span class=\"token operator\">-=</span> nread<span class=\"token punctuation\">;</span>\n    bufp <span class=\"token operator\">+=</span> nread<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Return >= 0</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nssize_t <span class=\"token function\">rio_writen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t nleft <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  ssize_t nwritten<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> usrbuf<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nleft <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nwritten <span class=\"token operator\">=</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> bufp<span class=\"token punctuation\">,</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">==</span> EINTR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nwritten <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    nleft <span class=\"token operator\">-=</span> nwritten<span class=\"token punctuation\">;</span>\n    bufp <span class=\"token operator\">+=</span> nwritten<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">rio_readinitb</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  rp<span class=\"token operator\">-></span>rio_fd <span class=\"token operator\">=</span> fd<span class=\"token punctuation\">;</span>\n  rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  rp<span class=\"token operator\">-></span>rio_bufptr <span class=\"token operator\">=</span> rp<span class=\"token operator\">-></span>rio_buf<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 内部的 rio_read 函数</span>\n<span class=\"token keyword\">static</span> ssize_t <span class=\"token function\">rio_read</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Refill if buf is empty</span>\n    rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_fd<span class=\"token punctuation\">,</span> rp<span class=\"token operator\">-></span>rio_buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">!=</span> EINTR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// EOF</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        rp<span class=\"token operator\">-></span>rio_bufptr <span class=\"token operator\">=</span> rp<span class=\"token operator\">-></span>rio_buf<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Reset buffer ptr</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Copy min(n, rp->rio_cnt) bytes from internal buf to user buf</span>\n  cnt <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span>\n    cnt <span class=\"token operator\">=</span> rp<span class=\"token operator\">-></span>rio_cnt<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>usrbuf<span class=\"token punctuation\">,</span> rp<span class=\"token operator\">-></span>rio_bufptr<span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  rp<span class=\"token operator\">-></span>rio_bufptr <span class=\"token operator\">+=</span> cnt<span class=\"token punctuation\">;</span>\n  rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">-=</span> cnt<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nssize_t <span class=\"token function\">rio_readlineb</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t maxlen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> rc<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> usrbuf<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> maxlen<span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rc <span class=\"token operator\">=</span> <span class=\"token function\">rio_read</span><span class=\"token punctuation\">(</span>rp<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">*</span>bufp<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rc <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EOF, no data read</span>\n      <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EOF, some data was read</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nssize_t <span class=\"token function\">rio_readnb</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t nleft <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  ssize_t nread<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> usrbuf<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nleft <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nread <span class=\"token operator\">=</span> <span class=\"token function\">rio_read</span><span class=\"token punctuation\">(</span>rp<span class=\"token punctuation\">,</span> bufp<span class=\"token punctuation\">,</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nread <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    nleft <span class=\"token operator\">-=</span> nread<span class=\"token punctuation\">;</span>\n    bufp <span class=\"token operator\">+=</span> nread<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/10/readme.md</code></p>\n<p>打开或关闭文件</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">,</span> mode_t mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：若成功则为新文件描述符，若出错为 -1</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：若成功则为 0，若出错则为 -1</span></code></pre></div>\n<p>读和写文件</p>\n<p>size<em>t --- unsigned long\nssize</em>t --- long</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n\nssize_t <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：若成功则为读的字节数，若 EOF 则为 0，若出错为 -1</span>\n\nssize_t <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：若成功则为写的字节数，若出错则为 -1</span></code></pre></div>\n<p>RIO Robust I/O</p>\n<p>RIO 的无缓冲的输入输出函数</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">ssize_t <span class=\"token function\">rio_readn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nssize_t <span class=\"token function\">rio_writen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：若成功则为传送的字节数，若 EOF 则为 0，若出错则为 -1</span></code></pre></div>\n<p>RIO 的带缓冲的输入函数</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">rio_readinitb</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nssize_t <span class=\"token function\">rio_readlineb</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t maxlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nssize_t <span class=\"token function\">rio_readnb</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：若成功则为读的字节数，若 EOF 则为 0，若出错则为 -1</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/11/csapp.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"csapp.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> RIO_BUFSIZE 8192</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> rio_fd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Descriptor for this internal buf</span>\n  <span class=\"token keyword\">int</span> rio_cnt<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Unread bytes in internal buf</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>rio_bufptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Next unread byte in internal buf</span>\n  <span class=\"token keyword\">char</span> rio_buf<span class=\"token punctuation\">[</span>RIO_BUFSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Internal buffer</span>\n<span class=\"token punctuation\">}</span> rio_t<span class=\"token punctuation\">;</span>\n\nssize_t <span class=\"token function\">rio_readn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t nleft <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  ssize_t nread<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> usrbuf<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nleft <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nread <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> bufp<span class=\"token punctuation\">,</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Interrupted by sig handler return and call read() again</span>\n      <span class=\"token comment\">// 被应用信号处理程序的返回终端，手动重启</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">==</span> EINTR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nread <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// errno set by read()</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nread <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// EOF</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    nleft <span class=\"token operator\">-=</span> nread<span class=\"token punctuation\">;</span>\n    bufp <span class=\"token operator\">+=</span> nread<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Return >= 0</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nssize_t <span class=\"token function\">rio_writen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t nleft <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  ssize_t nwritten<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> usrbuf<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nleft <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nwritten <span class=\"token operator\">=</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> bufp<span class=\"token punctuation\">,</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">==</span> EINTR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nwritten <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    nleft <span class=\"token operator\">-=</span> nwritten<span class=\"token punctuation\">;</span>\n    bufp <span class=\"token operator\">+=</span> nwritten<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">rio_readinitb</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  rp<span class=\"token operator\">-></span>rio_fd <span class=\"token operator\">=</span> fd<span class=\"token punctuation\">;</span>\n  rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  rp<span class=\"token operator\">-></span>rio_bufptr <span class=\"token operator\">=</span> rp<span class=\"token operator\">-></span>rio_buf<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 内部的 rio_read 函数</span>\n<span class=\"token keyword\">static</span> ssize_t <span class=\"token function\">rio_read</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Refill if buf is empty</span>\n    rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_fd<span class=\"token punctuation\">,</span> rp<span class=\"token operator\">-></span>rio_buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">!=</span> EINTR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// EOF</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        rp<span class=\"token operator\">-></span>rio_bufptr <span class=\"token operator\">=</span> rp<span class=\"token operator\">-></span>rio_buf<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Reset buffer ptr</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Copy min(n, rp->rio_cnt) bytes from internal buf to user buf</span>\n  cnt <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span>\n    cnt <span class=\"token operator\">=</span> rp<span class=\"token operator\">-></span>rio_cnt<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>usrbuf<span class=\"token punctuation\">,</span> rp<span class=\"token operator\">-></span>rio_bufptr<span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  rp<span class=\"token operator\">-></span>rio_bufptr <span class=\"token operator\">+=</span> cnt<span class=\"token punctuation\">;</span>\n  rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">-=</span> cnt<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nssize_t <span class=\"token function\">rio_readlineb</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t maxlen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> rc<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> usrbuf<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> maxlen<span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rc <span class=\"token operator\">=</span> <span class=\"token function\">rio_read</span><span class=\"token punctuation\">(</span>rp<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">*</span>bufp<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rc <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EOF, no data read</span>\n      <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EOF, some data was read</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nssize_t <span class=\"token function\">rio_readnb</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t nleft <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  ssize_t nread<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> usrbuf<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nleft <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nread <span class=\"token operator\">=</span> <span class=\"token function\">rio_read</span><span class=\"token punctuation\">(</span>rp<span class=\"token punctuation\">,</span> bufp<span class=\"token punctuation\">,</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nread <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    nleft <span class=\"token operator\">-=</span> nread<span class=\"token punctuation\">;</span>\n    bufp <span class=\"token operator\">+=</span> nread<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// 11</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">open_clientfd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>hostname<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>port<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> clientfd<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span> hints<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>listp<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// get a list of potential server addresses</span>\n  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>hints<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  hints<span class=\"token punctuation\">.</span>ai_socktype <span class=\"token operator\">=</span> SOCK_STREAM<span class=\"token punctuation\">;</span> <span class=\"token comment\">// open a connection</span>\n  hints<span class=\"token punctuation\">.</span>ai_flags <span class=\"token operator\">=</span> AI_NUMERICSERV<span class=\"token punctuation\">;</span> <span class=\"token comment\">// using a numeric port arg</span>\n  hints<span class=\"token punctuation\">.</span>ai_flags <span class=\"token operator\">|=</span> AI_ADDRCONFIG<span class=\"token punctuation\">;</span> <span class=\"token comment\">// recommender for connections</span>\n  <span class=\"token function\">getaddrinfo</span><span class=\"token punctuation\">(</span>hostname<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hints<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>listp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// walk the list for one that we can successfully connect to</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> listp<span class=\"token punctuation\">;</span> p<span class=\"token punctuation\">;</span> p <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>ai_next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// create a socket descriptor</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>clientfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>ai_family<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_socktype<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// socket failed, try the next</span>\n\n    <span class=\"token comment\">// connect to the server</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>clientfd<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_addr<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_addrlen<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// success</span>\n\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>clientfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// connect failed, try another</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// clean up</span>\n  <span class=\"token function\">freeaddrinfo</span><span class=\"token punctuation\">(</span>listp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// all connects failed</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token comment\">// the last connect succeeded</span>\n    <span class=\"token keyword\">return</span> clientfd<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">open_listenfd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>port<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span> hints<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>listp<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> listenfd<span class=\"token punctuation\">,</span> optval <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// get a list of potential server addresses</span>\n  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>hints<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  hints<span class=\"token punctuation\">.</span>ai_socktype <span class=\"token operator\">=</span> SOCK_STREAM<span class=\"token punctuation\">;</span> <span class=\"token comment\">// accept connection</span>\n  hints<span class=\"token punctuation\">.</span>ai_flags <span class=\"token operator\">=</span> AI_PASSIVE <span class=\"token operator\">|</span> AI_ADDRCONFIG<span class=\"token punctuation\">;</span> <span class=\"token comment\">// on any IP address</span>\n  hints<span class=\"token punctuation\">.</span>ai_flags <span class=\"token operator\">|=</span> AI_NUMERICSERV<span class=\"token punctuation\">;</span> <span class=\"token comment\">// using port number</span>\n  <span class=\"token function\">getaddrinfo</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hints<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>listp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// walk the list for one that we can bind to</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> listp <span class=\"token punctuation\">;</span> p<span class=\"token punctuation\">;</span> p <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>ai_next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// create a socket descriptor</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>listenfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>ai_family<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_socktype<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// socket failed, try the next</span>\n\n    <span class=\"token comment\">// eliminates \"address already in use\" error from bind</span>\n    <span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>optval<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// bind the descriptor to the address</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_addr<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_addrlen<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// success</span>\n\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bind failed, try the next</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// clean up</span>\n  <span class=\"token function\">freeaddrinfo</span><span class=\"token punctuation\">(</span>listp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// no address worked</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// make it a listening socket ready to accept connection requests</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">,</span> LISTENQ<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> listenfd<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/11/csapp.h</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netdb.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> RIO_BUFSIZE 8192</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> MAXLINE 100</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> LISTENQ 1024</span>\n\n<span class=\"token comment\">// Unix-style error</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">unix_error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s: %s\\n\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\npid_t <span class=\"token function\">Fork</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  pid_t pid<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pid <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">unix_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fork error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> pid<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> rio_fd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Descriptor for this internal buf</span>\n  <span class=\"token keyword\">int</span> rio_cnt<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Unread bytes in internal buf</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>rio_bufptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Next unread byte in internal buf</span>\n  <span class=\"token keyword\">char</span> rio_buf<span class=\"token punctuation\">[</span>RIO_BUFSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Internal buffer</span>\n<span class=\"token punctuation\">}</span> rio_t<span class=\"token punctuation\">;</span>\n\nssize_t <span class=\"token function\">rio_readn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t nleft <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  ssize_t nread<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> usrbuf<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nleft <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nread <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> bufp<span class=\"token punctuation\">,</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Interrupted by sig handler return and call read() again</span>\n      <span class=\"token comment\">// 被应用信号处理程序的返回终端，手动重启</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">==</span> EINTR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nread <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// errno set by read()</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nread <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// EOF</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    nleft <span class=\"token operator\">-=</span> nread<span class=\"token punctuation\">;</span>\n    bufp <span class=\"token operator\">+=</span> nread<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Return >= 0</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nssize_t <span class=\"token function\">rio_writen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t nleft <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  ssize_t nwritten<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> usrbuf<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nleft <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nwritten <span class=\"token operator\">=</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> bufp<span class=\"token punctuation\">,</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">==</span> EINTR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nwritten <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    nleft <span class=\"token operator\">-=</span> nwritten<span class=\"token punctuation\">;</span>\n    bufp <span class=\"token operator\">+=</span> nwritten<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">rio_readinitb</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  rp<span class=\"token operator\">-></span>rio_fd <span class=\"token operator\">=</span> fd<span class=\"token punctuation\">;</span>\n  rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  rp<span class=\"token operator\">-></span>rio_bufptr <span class=\"token operator\">=</span> rp<span class=\"token operator\">-></span>rio_buf<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 内部的 rio_read 函数</span>\n<span class=\"token keyword\">static</span> ssize_t <span class=\"token function\">rio_read</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Refill if buf is empty</span>\n    rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_fd<span class=\"token punctuation\">,</span> rp<span class=\"token operator\">-></span>rio_buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">!=</span> EINTR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// EOF</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        rp<span class=\"token operator\">-></span>rio_bufptr <span class=\"token operator\">=</span> rp<span class=\"token operator\">-></span>rio_buf<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Reset buffer ptr</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Copy min(n, rp->rio_cnt) bytes from internal buf to user buf</span>\n  cnt <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span>\n    cnt <span class=\"token operator\">=</span> rp<span class=\"token operator\">-></span>rio_cnt<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>usrbuf<span class=\"token punctuation\">,</span> rp<span class=\"token operator\">-></span>rio_bufptr<span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  rp<span class=\"token operator\">-></span>rio_bufptr <span class=\"token operator\">+=</span> cnt<span class=\"token punctuation\">;</span>\n  rp<span class=\"token operator\">-></span>rio_cnt <span class=\"token operator\">-=</span> cnt<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nssize_t <span class=\"token function\">rio_readlineb</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t maxlen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> rc<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> usrbuf<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> maxlen<span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rc <span class=\"token operator\">=</span> <span class=\"token function\">rio_read</span><span class=\"token punctuation\">(</span>rp<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">*</span>bufp<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rc <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EOF, no data read</span>\n      <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EOF, some data was read</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nssize_t <span class=\"token function\">rio_readnb</span><span class=\"token punctuation\">(</span>rio_t <span class=\"token operator\">*</span>rp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>usrbuf<span class=\"token punctuation\">,</span> size_t n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t nleft <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  ssize_t nread<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bufp <span class=\"token operator\">=</span> usrbuf<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nleft <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nread <span class=\"token operator\">=</span> <span class=\"token function\">rio_read</span><span class=\"token punctuation\">(</span>rp<span class=\"token punctuation\">,</span> bufp<span class=\"token punctuation\">,</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nread <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    nleft <span class=\"token operator\">-=</span> nread<span class=\"token punctuation\">;</span>\n    bufp <span class=\"token operator\">+=</span> nread<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> nleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// 11</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">open_clientfd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>hostname<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>port<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> clientfd<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span> hints<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>listp<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// get a list of potential server addresses</span>\n  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>hints<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  hints<span class=\"token punctuation\">.</span>ai_socktype <span class=\"token operator\">=</span> SOCK_STREAM<span class=\"token punctuation\">;</span> <span class=\"token comment\">// open a connection</span>\n  hints<span class=\"token punctuation\">.</span>ai_flags <span class=\"token operator\">=</span> AI_NUMERICSERV<span class=\"token punctuation\">;</span> <span class=\"token comment\">// using a numeric port arg</span>\n  hints<span class=\"token punctuation\">.</span>ai_flags <span class=\"token operator\">|=</span> AI_ADDRCONFIG<span class=\"token punctuation\">;</span> <span class=\"token comment\">// recommender for connections</span>\n  <span class=\"token function\">getaddrinfo</span><span class=\"token punctuation\">(</span>hostname<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hints<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>listp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// walk the list for one that we can successfully connect to</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> listp<span class=\"token punctuation\">;</span> p<span class=\"token punctuation\">;</span> p <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>ai_next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// create a socket descriptor</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>clientfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>ai_family<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_socktype<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// socket failed, try the next</span>\n\n    <span class=\"token comment\">// connect to the server</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>clientfd<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_addr<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_addrlen<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// success</span>\n\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>clientfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// connect failed, try another</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// clean up</span>\n  <span class=\"token function\">freeaddrinfo</span><span class=\"token punctuation\">(</span>listp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// all connects failed</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token comment\">// the last connect succeeded</span>\n    <span class=\"token keyword\">return</span> clientfd<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">open_listenfd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>port<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span> hints<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>listp<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> listenfd<span class=\"token punctuation\">,</span> optval <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// get a list of potential server addresses</span>\n  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>hints<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  hints<span class=\"token punctuation\">.</span>ai_socktype <span class=\"token operator\">=</span> SOCK_STREAM<span class=\"token punctuation\">;</span> <span class=\"token comment\">// accept connection</span>\n  hints<span class=\"token punctuation\">.</span>ai_flags <span class=\"token operator\">=</span> AI_PASSIVE <span class=\"token operator\">|</span> AI_ADDRCONFIG<span class=\"token punctuation\">;</span> <span class=\"token comment\">// on any IP address</span>\n  hints<span class=\"token punctuation\">.</span>ai_flags <span class=\"token operator\">|=</span> AI_NUMERICSERV<span class=\"token punctuation\">;</span> <span class=\"token comment\">// using port number</span>\n  <span class=\"token function\">getaddrinfo</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hints<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>listp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// walk the list for one that we can bind to</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> listp <span class=\"token punctuation\">;</span> p<span class=\"token punctuation\">;</span> p <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>ai_next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// create a socket descriptor</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>listenfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>ai_family<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_socktype<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// socket failed, try the next</span>\n\n    <span class=\"token comment\">// eliminates \"address already in use\" error from bind</span>\n    <span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>optval<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// bind the descriptor to the address</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_addr<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_addrlen<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// success</span>\n\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bind failed, try the next</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// clean up</span>\n  <span class=\"token function\">freeaddrinfo</span><span class=\"token punctuation\">(</span>listp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// no address worked</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// make it a listening socket ready to accept connection requests</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">,</span> LISTENQ<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> listenfd<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> connfd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t n<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span>MAXLINE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  rio_t rio<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">rio_readinitb</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rio<span class=\"token punctuation\">,</span> connfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> <span class=\"token function\">rio_readlineb</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rio<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> MAXLINE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"server received %d bytes\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">rio_writen</span><span class=\"token punctuation\">(</span>connfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/11/echo.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"csapp.h\"</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> connfd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t n<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span>MAXLINE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  rio_t rio<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">rio_readinitb</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rio<span class=\"token punctuation\">,</span> connfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> <span class=\"token function\">rio_readlineb</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rio<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> MAXLINE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"server received %d bytes\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">rio_writen</span><span class=\"token punctuation\">(</span>connfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/11/echoclient.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"csapp.h\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> clientfd<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>host<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>port<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">[</span>MAXLINE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  rio_t rio<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">!=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"usage: %s &lt;host> &lt;port>\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  host <span class=\"token operator\">=</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  port <span class=\"token operator\">=</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  clientfd <span class=\"token operator\">=</span> <span class=\"token function\">open_clientfd</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">rio_readinitb</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rio<span class=\"token punctuation\">,</span> clientfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> MAXLINE<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">rio_writen</span><span class=\"token punctuation\">(</span>clientfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">rio_readlineb</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rio<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> MAXLINE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>clientfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/11/echoserveri.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"csapp.h\"</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> connfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> listenfd<span class=\"token punctuation\">,</span> connfd<span class=\"token punctuation\">;</span>\n  socklen_t clientlen<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_storage</span> clientaddr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// enough space for any address</span>\n  <span class=\"token keyword\">char</span> client_hostname<span class=\"token punctuation\">[</span>MAXLINE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> client_port<span class=\"token punctuation\">[</span>MAXLINE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"usage: %s &lt;port>\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  listenfd <span class=\"token operator\">=</span> <span class=\"token function\">open_listenfd</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    clientlen <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_storage</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    connfd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>listenfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>clientaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>clientlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">getnameinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>clientaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> clientlen<span class=\"token punctuation\">,</span> client_hostname<span class=\"token punctuation\">,</span> MAXLINE<span class=\"token punctuation\">,</span> client_port<span class=\"token punctuation\">,</span> MAXLINE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connected to (%s %s)\\n\"</span><span class=\"token punctuation\">,</span> client_hostname<span class=\"token punctuation\">,</span> client_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span>connfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>connfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/11/hostinfo.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"csapp.h\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>listp<span class=\"token punctuation\">,</span> hints<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span>MAXLINE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> rc<span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"usage: %s &lt;domain name>\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// get a list of addrinfo records</span>\n  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>hints<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  hints<span class=\"token punctuation\">.</span>ai_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span> <span class=\"token comment\">// IPv4 only</span>\n  hints<span class=\"token punctuation\">.</span>ai_socktype <span class=\"token operator\">=</span> SOCK_STREAM<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Connections only</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rc <span class=\"token operator\">=</span> <span class=\"token function\">getaddrinfo</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hints<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>listp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"getaddrinfo error: %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">gai_strerror</span><span class=\"token punctuation\">(</span>rc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Walk the list and display each IP address</span>\n  flags <span class=\"token operator\">=</span> NI_NUMERICHOST<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Display address string instead of domain name</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> listp<span class=\"token punctuation\">;</span> p<span class=\"token punctuation\">;</span> p <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>ai_next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getnameinfo</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>ai_addr<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>ai_addrlen<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> MAXLINE<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Clean up</span>\n  <span class=\"token function\">freeaddrinfo</span><span class=\"token punctuation\">(</span>listp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/11/readme.md</code></p>\n<p>IP 地址</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// IP address structure</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">in_addr</span> <span class=\"token punctuation\">{</span>\n  uint32_t s_addr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Address in netword byte order (big-endian)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Unix 提供了下面这样的函数在网络和主机字节顺序间实现转换。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span>\n\nuint32_t <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>uint32_t hostlong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuint16_t <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>uint16_t hostshort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：按照网络字节顺序的值</span>\n\nuint32_t <span class=\"token function\">ntohl</span><span class=\"token punctuation\">(</span>uint32_t netlong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuint16_t <span class=\"token function\">ntohs</span><span class=\"token punctuation\">(</span>uint16_t netshort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：按照主机字节顺序的值</span></code></pre></div>\n<p>套接字地址结构</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// IP socket address structure</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> <span class=\"token punctuation\">{</span>\n  uint16_t sin_family<span class=\"token punctuation\">;</span>\n  uint16_t sin_port<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">in_addr</span> sin_addr<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> sin_zero<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Generic socket address structure</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token punctuation\">{</span>\n  uint16_t sa_family<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> sa_data<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>socket 函数</p>\n<p>客户端和服务器使用 socket 函数来创建一个套接字描述符。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> domain<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：若成功则为非负描述符，若出错则为 -1</span></code></pre></div>\n<p>connect 函数</p>\n<p>客户端通过调用 connect 函数来建立和服务器的连接。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> clientfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>addr<span class=\"token punctuation\">,</span> socklen_t addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：若成功则为 0，若出错则为 -1</span></code></pre></div>\n<p>connect 函数会阻塞</p>\n<p>服务器：bind、listen 和 accept</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>addr<span class=\"token punctuation\">,</span> socklen_t addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：若成功则为 0，若出错则为 -1</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sockfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> backlog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：若成功则为 0，若出错则为 -1</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> listenfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：若成功则为非负连接描述符，若出错则为 -1</span></code></pre></div>\n<p>getaddrinfo 函数</p>\n<p>将主机名、主机地址、服务名和端口号的字符串表示转化成套接字地址结构。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netdb.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">getaddrinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>host<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>service<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span> <span class=\"token operator\">*</span>hints<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：如果成功则为 0，如果错误则为非零的错误代码</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">freeaddrinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span> <span class=\"token operator\">*</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回： 无</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">gai_strerror</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> errcode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：错误消息</span></code></pre></div>\n<p>addrinfo 结构</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> ai_flags<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> ai_family<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> ai_socktype<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> ai_protocol<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>ai_canonname<span class=\"token punctuation\">;</span>\n  size_t ai_addrlen<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>ai_addr<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">addrinfo</span> <span class=\"token operator\">*</span>ai_next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>getnameinfo 与 getaddrinfo 相反</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netdb.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">getnameinfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span>sa<span class=\"token punctuation\">,</span> socklen_t salen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>host<span class=\"token punctuation\">,</span> size_t hostlen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> service<span class=\"token punctuation\">,</span> size_t servlen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：如果成功则为 0，如果错误则为非零的错误代码</span></code></pre></div>\n<p>套接字接口辅助函数</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">open_clientfd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>hostname<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">open_listenfd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回：若成功则为描述符，若出错则为 -1</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/7-link/main.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/7-link/readme.md</code></p>\n<p>gcc -Og -o prog main.c sum.c</p>\n<hr>\n<p><code class=\"language-text\">/deep/7-link/sum.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    s <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/8/csapp.h</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h></span></span>\n\n<span class=\"token comment\">// Unix-style error</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">unix_error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s: %s\\n\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\npid_t <span class=\"token function\">Fork</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  pid_t pid<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pid <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">unix_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fork error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> pid<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/8/fork.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  pid_t pid<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  pid <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 子进程</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pid <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child : x=%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 父进程</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"parent: x=%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">--</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/8/get_pid.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 当前进程</span>\n  pid_t p <span class=\"token operator\">=</span> <span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pid: %d\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 父进程</span>\n  p <span class=\"token operator\">=</span> <span class=\"token function\">getppid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ppid: %d\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 进程组</span>\n  p <span class=\"token operator\">=</span> <span class=\"token function\">getpgrp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pgrp: %d\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/8/hello.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello, world\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">_exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/8/kill.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"csapp.h\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  pid_t pid<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Child sleeps until SIGKILL signal received, then dies</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pid <span class=\"token operator\">=</span> <span class=\"token function\">Fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Wait for a signal to arrive</span>\n    <span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"control should never reach here!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Parent sends a SIGKILL signal to a child</span>\n  <span class=\"token function\">kill</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span> SIGKILL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/8/sigint.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"csapp.h\"</span></span>\n\n<span class=\"token comment\">// 捕获键盘 Ctrl+C 发送的 SIGINT 信号</span>\n\n<span class=\"token comment\">// SIGINT handler</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">sigint_handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Caught SIGINT!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Install the SIGINT handler</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>SIGINT<span class=\"token punctuation\">,</span> sigint_handler<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SIG_ERR<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">unix_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"signal error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Wait for the receipt of a signal</span>\n  <span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/8/waitpid1.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"csapp.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> N 10</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> status<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n  pid_t pid<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 创建 N 个子进程</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pid <span class=\"token operator\">=</span> <span class=\"token function\">Fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 子进程退出</span>\n      <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 回收子进程，顺序不固定</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pid <span class=\"token operator\">=</span> <span class=\"token function\">waitpid</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>status<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">WIFEXITED</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child %d terminated normally with exit status=%d\\n\"</span><span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">,</span> <span class=\"token function\">WEXITSTATUS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child %d terminated abnormally\\n\"</span><span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 最后一次调用 waitpid 返回 -1，并设置 errno 为 ECHILD</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">!=</span> ECHILD<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">unix_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"waitpid error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/deep/8/waitpid2.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"csapp.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> N 10</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> status<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n  pid_t pid<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> retpid<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 创建 N 个子进程</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 子进程退出</span>\n      <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 回收子进程，顺序固定</span>\n  i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>retpid <span class=\"token operator\">=</span> <span class=\"token function\">waitpid</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>status<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">WIFEXITED</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child %d terminated normally with exit status=%d\\n\"</span><span class=\"token punctuation\">,</span> retpid<span class=\"token punctuation\">,</span> <span class=\"token function\">WEXITSTATUS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child %d terminated abnormally\\n\"</span><span class=\"token punctuation\">,</span> retpid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 最后一次调用 waitpid 返回 -1，并设置 errno 为 ECHILD</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">!=</span> ECHILD<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">unix_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"waitpid error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/note.md</code></p>\n<h1>C程序设计语言</h1>\n<h2>1 - 导言</h2>\n<p>编译：cc hello.c</p>\n<p>执行：./a.out</p>\n<p><code class=\"language-text\">include &lt;stdio.h&gt;</code> 包含标准库的信息，告诉编译器在本程序中包含标准输入/输出库的信息。</p>\n<p>程序的起点为 main 函数</p>\n<p>main 函数不接收参数值</p>\n<p>用双引号括起来的字符序列称为<strong>字符串</strong>或<strong>字符常量</strong>。</p>\n<p>printf 函数不是C语言本身的一部分，仅是标准库函数中的一个函数。</p>\n<ul>\n<li>%3.0f 至少占3字符宽，不带小数点和小数部分</li>\n<li>%6.1f 至少占6字符宽，小数点后面有1位数字</li>\n<li>%d 十进制</li>\n<li>%f 浮点数</li>\n<li>%o 八进制</li>\n<li>%x 十六进制</li>\n<li>%c 字符</li>\n<li>%s 字符串</li>\n<li>%% %</li>\n</ul>\n<p><code class=\"language-text\">#define</code> 指令可以把符号名（符号变量）定义为一个特定的字符串：<code class=\"language-text\">#define 名字 替换文本</code>，指令末尾无分号。</p>\n<p>getchar() 和 putchar()</p>\n<ul>\n<li>getchar 从文本流中读入下一个输入字符，作为结果返回</li>\n<li>putchar 将打印一个字符</li>\n</ul>\n<p>EOF end of file 定义在头文件<code class=\"language-text\">&lt;stdio.h&gt;</code> 中，是一个<strong>整型数</strong>。与任何 char 类型的值都不相同。</p>\n<hr>\n<p><code class=\"language-text\">/tmp/main.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">multstore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">long</span> d<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">multstore</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2 * 3 --> %ld\\n\"</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">long</span> <span class=\"token function\">mult2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">long</span> s <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/tmp/mstore.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">long</span> <span class=\"token function\">mult2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">multstore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span>dest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">long</span> t <span class=\"token operator\">=</span> <span class=\"token function\">mult2</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span>dest <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><code class=\"language-text\">/tmp/show_bytes.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token comment\">// 使用强制类型转换来访问和打印不同程序对象的字节表示</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>byte_pointer<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_bytes</span><span class=\"token punctuation\">(</span>byte_pointer start<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 因为 char 类型的指针每次是按照字节加 1</span>\n  <span class=\"token comment\">// 所以可以打印出存储在相应地址的字节</span>\n\n  <span class=\"token comment\">// pa[i] 与 *(pa+i) 是等价的</span>\n  <span class=\"token comment\">// 一个通过数组和下标实现的表达式可等价地通过指针和偏移量实现</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 数组形式</span>\n    <span class=\"token comment\">// start[i] 表示读取以 start 指向的位置为起始的第 i 个位置处的字节</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" %.2x\"</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 指针形式</span>\n    <span class=\"token comment\">// printf(\" %.2x\", *start++);</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 强制类型转换</span>\n  <span class=\"token comment\">// 并不会改变真实的指针，而是告诉编译器以新的数据类型来看待被指向的数据</span>\n  <span class=\"token function\">show_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>byte_pointer<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_float</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">show_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>byte_pointer<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 指向任何对象的指针都可以转换为 void * 类型，且不会丢失信息</span>\n<span class=\"token comment\">// 如果将结果再转换为初始指针类型，则可以恢复初始指针</span>\n<span class=\"token comment\">// ANSI C 使用类型 void * 代替 char * 作为通用指针的类型</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_pointer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">show_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>byte_pointer<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">test_show_bytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> ival <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 39 30 00 00 => 小端法</span>\n  <span class=\"token function\">show_int</span><span class=\"token punctuation\">(</span>ival<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">show_float</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>ival<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">show_pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ival<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 0x00003039</span>\n  <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">12345</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">test_show_bytes</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">show_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>byte_pointer<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span><span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"c语言一些示例","date":"March 01, 2019","description":""}}},"pageContext":{"slug":"/20190302-some-c-example/","previous":{"fields":{"slug":"/20190213-recent-notes/","path":"/post/20190213-recent-notes/"},"frontmatter":{"title":"最近的笔记"}},"next":{"fields":{"slug":"/20190623-compare-node-go-java-web-perfermance/","path":"/post/20190623-compare-node-go-java-web-perfermance/"},"frontmatter":{"title":"对比node/go/java等语言web服务器性能"}}}}}