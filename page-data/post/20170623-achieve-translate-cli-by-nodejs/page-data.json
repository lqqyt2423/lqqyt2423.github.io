{"componentChunkName":"component---src-templates-blog-post-js","path":"/post/20170623-achieve-translate-cli-by-nodejs/","result":{"data":{"site":{"siteMetadata":{"title":"lqqyt2423's blog"}},"markdownRemark":{"id":"e68396e9-3d37-5e98-837b-a7ad4fa185e9","excerpt":"平时电脑上执行node 程序时，必须进入此程序目录，然后在终端输入： 才能执行此程序。 但是这样子效率不高，如果可以只输入一个命令单词就可以执行，那就会很高效了。例如就像在终端列出文件的命令这样： 编写最简单的node 命令行程序 从最简单的hello world…","html":"<p>平时电脑上执行node 程序时，必须进入此程序目录，然后在终端输入：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">node index.js</code></pre></div>\n<p>才能执行此程序。</p>\n<p>但是这样子效率不高，如果可以只输入一个命令单词就可以执行，那就会很高效了。例如就像在终端列出文件的命令这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ls</code></pre></div>\n<h2>编写最简单的node 命令行程序</h2>\n<p>从最简单的hello world 程序说起，编写一个文件，文件名为<code class=\"language-text\">hello</code> ，文件内容为：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">#<span class=\"token operator\">!</span><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>env node\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我估摸着第一行的意思应该是调用node 的执行环境执行此脚本。</p>\n<p>保存文件之后需要修改此文件的权限为755，表示具有执行权限</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">chmod 755 hello</code></pre></div>\n<blockquote>\n<p>最近在学习Linux 的相关知识点，在Linux 中，所有文件都会有三个权限分别为：读、写和执行。然后每个权限有自己的代码：读-4，写-2，执行-1。所谓的755权限便是指此文件的拥有者具有三个权限，然后此文件的群组和路人只具有5的权限，即读和执行，没有写的权限。</p>\n<p>总之要执行脚本，最重要是要设置脚本的执行权限。</p>\n<p>可通过<code class=\"language-text\">ls -l</code> 来查看文件的具体信息，权限表示类似这样：<code class=\"language-text\">lrwxr-xr-x</code>。</p>\n</blockquote>\n<p>之后便可以执行此文件了，在终端输入：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">./hello</code></pre></div>\n<p>便可执行此脚本，执行后便会输出<code class=\"language-text\">hello world</code>。<code class=\"language-text\">./</code> 表示相对路径，此路径。</p>\n<p>如果在其他路径下也想要执行此脚本，就必须将此脚本加入至环境变量$PATH 中。</p>\n<p>下面命令会创建此脚本的符号链接至目录<code class=\"language-text\">/usr/local/bin</code> ，即环境变量的目录：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ln -s 绝对路径/hello /usr/local/bin/hello</code></pre></div>\n<p>所谓符号链接，即快捷方式，之后打开终端便可以随时执行此脚本了：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">hello</code></pre></div>\n<h2>翻译脚本命令行程序的实现</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">#<span class=\"token operator\">!</span><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>env node\n<span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 接收输入的单词</span>\n<span class=\"token keyword\">var</span> word <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nword <span class=\"token operator\">=</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 翻译的API</span>\n<span class=\"token keyword\">var</span> link <span class=\"token operator\">=</span> <span class=\"token string\">'http://fanyi.youdao.com/openapi.do?keyfrom=f2ec-org&amp;key=1787962561&amp;type=data&amp;doctype=json&amp;version=1.1&amp;q='</span> <span class=\"token operator\">+</span> word<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 联网翻译</span>\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// console.log(res.headers);</span>\n\t<span class=\"token keyword\">var</span> body <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tres<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tbody<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tres<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tbody <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbody <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbody <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token string\">'errorCode'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token string\">'basic'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span>explains<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token string\">'traslation'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token string\">'web'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> --- </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">';'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 在终端输出翻译结果</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上面即全部的代码，逻辑很简单，终端输入单词，调用翻译API 接口，然后终端输出翻译之后的结果。</p>\n<p><code class=\"language-text\">process.argv[2]</code> 的意思为接收用户输入的第一个参数，为什么后面的数值是2呢，因为0和1都被他们自己的一个属性占用掉了，你可以console 自己测试。</p>\n<p>保存上面文件为<code class=\"language-text\">translate</code> 文件，不需要添加后缀名。然后再添加符号链接即快捷方式至环境变量中即可，为了简单，可以使快捷方式文件名为<code class=\"language-text\">t</code> 表示。</p>\n<p>之后想要查询单词时，直接在终端输入：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">t apple</code></pre></div>\n<p>即可得到想要的翻译结果，也可翻译中文至英文：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">t 苹果</code></pre></div>\n<h2>参考网址</h2>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/05/command-line-with-node.html\">Node.js 命令行程序开发教程</a></li>\n<li><a href=\"https://github.com/cloudcome/nodejs-ydr-translate/blob/master/youdao.md\">随手找了一个有道翻译API</a></li>\n</ul>","frontmatter":{"title":"node命令行程序开发之实现中英翻译功能","date":"June 22, 2017","description":""}}},"pageContext":{"slug":"/20170623-achieve-translate-cli-by-nodejs/","previous":{"fields":{"slug":"/20170611-knowledge-of-session-and-express/","path":"/post/20170611-knowledge-of-session-and-express/"},"frontmatter":{"title":"session原理、node实现session与express实现session"}},"next":{"fields":{"slug":"/20170712-javascript-notes/","path":"/post/20170712-javascript-notes/"},"frontmatter":{"title":"JavaScript 高级程序设计学习笔记"}}}}}