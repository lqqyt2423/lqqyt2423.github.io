{"componentChunkName":"component---src-templates-blog-post-js","path":"/post/20181108-docker-note/","result":{"data":{"site":{"siteMetadata":{"title":"lqqyt2423's blog"}},"markdownRemark":{"id":"d1eab2fc-e8eb-5ae3-a98f-f9ac4ad3de08","excerpt":"docker 官方仓库  常用命令 Dockerfile 文件 Dockerfile 是一个文本文件，用来配置 image。 示例 CMD 命令 RUN 命令和 CMD 命令的区别？\nRUN 命令在 image 文件的构建阶段执行，执行结果都会打包进入 image 文件；CMD…","html":"<h2>docker 官方仓库</h2>\n<p><code class=\"language-text\">https://hub.docker.com/</code></p>\n<h2>常用命令</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 验证是否安装成功</span>\ndocker version\ndocker info\n\n<span class=\"token comment\"># 列出本机所有 image 文件</span>\ndocker image <span class=\"token function\">ls</span>\n<span class=\"token comment\"># 删除 image 文件</span>\ndocker image <span class=\"token function\">rm</span> <span class=\"token punctuation\">[</span>imageName<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 从远程仓库拉取 image 至本地</span>\ndocker image pull library/hello-world\n<span class=\"token comment\"># docker 官方提供的 image 文件都放在 library 组里面</span>\n<span class=\"token comment\"># 或</span>\ndocker image pull hello-world\n\n<span class=\"token comment\"># 运行 image 文件</span>\n<span class=\"token comment\"># 此命令会在本地没有 image 的情况下自动从远程拉取</span>\ndocker container run hello-world\n\ndocker container run -it ubuntu <span class=\"token function\">bash</span>\n\n<span class=\"token comment\"># 列出本机正在运行的容器</span>\ndocker container <span class=\"token function\">ls</span>\n<span class=\"token comment\"># 或</span>\ndocker <span class=\"token function\">ps</span>\n<span class=\"token comment\"># 列出本机所有容器，包括终止运行的容器</span>\ndocker container <span class=\"token function\">ls</span> --all\n\n<span class=\"token comment\"># 手动终止容器</span>\ndocker container <span class=\"token function\">kill</span> <span class=\"token punctuation\">[</span>containerID<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 删除容器文件</span>\ndocker container <span class=\"token function\">rm</span> <span class=\"token punctuation\">[</span>containerID<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 启动已经生成的容器文件</span>\ndocker container start <span class=\"token punctuation\">[</span>containerID<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 渐进退出</span>\ndocker container stop <span class=\"token punctuation\">[</span>containerID<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 查看输出</span>\ndocker container logs <span class=\"token punctuation\">[</span>containerID<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 进入一个正在运行的 docker 容器</span>\n<span class=\"token comment\"># 适用于 docker run 时没有使用 -it 参数的情况</span>\ndocker container <span class=\"token builtin class-name\">exec</span> -it <span class=\"token punctuation\">[</span>containerID<span class=\"token punctuation\">]</span> /bin/bash\n\n<span class=\"token comment\"># 文件拷贝至本机当前目录</span>\ndocker container <span class=\"token function\">cp</span> <span class=\"token punctuation\">[</span>containerID<span class=\"token punctuation\">]</span>:<span class=\"token punctuation\">[</span>/path/to/file<span class=\"token punctuation\">]</span> <span class=\"token builtin class-name\">.</span></code></pre></div>\n<h2>Dockerfile 文件</h2>\n<p>Dockerfile 是一个文本文件，用来配置 image。</p>\n<h3>示例</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 该 image 文件继承官方的 node image，冒号表示标签，这里标签是8.4，即8.4版本的 node\nFROM node:8.4\n# 将当前目录下的所有文件（除了.dockerignore排除的路径），都拷贝进入 image 文件的/app目录\nCOPY . /app\n# 指定接下来的工作路径为/app\nWORKDIR /app\n# 在/app目录下，运行npm install命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件\nRUN npm install --registry=https://registry.npm.taobao.org\n# 将容器 3000 端口暴露出来， 允许外部连接这个端口\nEXPOSE 3000</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建 image 文件</span>\n<span class=\"token comment\"># -t 用来指定 image 文件的名字</span>\n<span class=\"token comment\"># 后面的冒号指定标签，如果不指定，默认为 latest</span>\n<span class=\"token comment\"># 最后的 . 表示 Dockerfile 文件在当前目录</span>\ndocker image build -t koa-demo <span class=\"token builtin class-name\">.</span>\n<span class=\"token comment\"># 或者</span>\ndocker image build -t koa-demo:0.0.1 <span class=\"token builtin class-name\">.</span>\n\n<span class=\"token comment\"># 运行成功后就可以看到新生成的 image 文件了</span>\ndocker image <span class=\"token function\">ls</span>\n\n<span class=\"token comment\"># 生成容器</span>\n<span class=\"token comment\"># -p 容器的 3000 端口映射至本机的 8000 端口</span>\n<span class=\"token comment\"># -it 容器的 Shell 映射至当前的 Shell</span>\n<span class=\"token comment\"># /bin/bash 容器启动之后，内部第一个执行的命令，这里启动 Bash，保证用户可以使用 Shell</span>\ndocker container run -p <span class=\"token number\">8000</span>:3000 -it koa-demo /bin/bash\n<span class=\"token comment\"># 或</span>\ndocker container run -p <span class=\"token number\">8000</span>:3000 -it koa-demo:0.0.1 /bin/bash\n\n<span class=\"token comment\"># --rm 在容器终止运行后自动删除容器文件</span>\ndocker container run --rm -p <span class=\"token number\">8000</span>:3000 -it koa-demo /bin/bash</code></pre></div>\n<h3>CMD 命令</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM node:8.4\nCOPY . /app\nWORKDIR /app\nRUN npm install --registry=https://registry.npm.taobao.org\nEXPOSE 3000\n\n# 容器启动后自动执行 node demos/01.js\nCMD node demos/01.js</code></pre></div>\n<blockquote>\n<p>RUN 命令和 CMD 命令的区别？\nRUN 命令在 image 文件的构建阶段执行，执行结果都会打包进入 image 文件；CMD 命令在容器启动后执行。一个 Dockerfile 可以包含多个 RUN 命令，但是只能有一个 CMD 命令。</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 因为指定了 CMD 命令，所以就不用附加命令了，否则会覆盖 CMD 命令</span>\ndocker container run --rm -p <span class=\"token number\">8000</span>:3000 -it koa-demo:0.0.1</code></pre></div>\n<h3>发布</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker login\n\n<span class=\"token comment\"># 为本地 image 标注用户名和版本</span>\ndocker image tag <span class=\"token punctuation\">[</span>imageName<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>username<span class=\"token punctuation\">]</span>/<span class=\"token punctuation\">[</span>repository<span class=\"token punctuation\">]</span>:<span class=\"token punctuation\">[</span>tag<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 或者重新构建一下 image 文件</span>\ndocker image build -t <span class=\"token punctuation\">[</span>username<span class=\"token punctuation\">]</span>/<span class=\"token punctuation\">[</span>repository<span class=\"token punctuation\">]</span>:<span class=\"token punctuation\">[</span>tag<span class=\"token punctuation\">]</span>\n\ndocker image push <span class=\"token punctuation\">[</span>username<span class=\"token punctuation\">]</span>/<span class=\"token punctuation\">[</span>repository<span class=\"token punctuation\">]</span>:<span class=\"token punctuation\">[</span>tag<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>docker container run 命令参数</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">--name name 定义容器的名字\n--volume &quot;$PWD&quot;:/var/www/html 将当前目录映射到容器对应的目录\n-p 8000:3000 容器的 3000 端口映射至本机的 8000 端口\n-d 容器启动后，在后台运行\n--env 向容器进程传入一个环境变量</code></pre></div>\n<h2>示例 WordPress</h2>\n<h3>A</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># php</span>\ndocker container run <span class=\"token punctuation\">\\</span>\n  -d <span class=\"token punctuation\">\\</span>\n  --rm <span class=\"token punctuation\">\\</span>\n  --name php <span class=\"token punctuation\">\\</span>\n  -p <span class=\"token number\">5000</span>:80 <span class=\"token punctuation\">\\</span>\n  --volume <span class=\"token string\">\"<span class=\"token environment constant\">$PWD</span>\"</span>:/var/www/html <span class=\"token punctuation\">\\</span>\n  php:5.6-apache\n\n<span class=\"token comment\"># mysql</span>\ndocker container run <span class=\"token punctuation\">\\</span>\n  -d <span class=\"token punctuation\">\\</span>\n  --rm <span class=\"token punctuation\">\\</span>\n  --name wpdb <span class=\"token punctuation\">\\</span>\n  --env <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">123456</span> <span class=\"token punctuation\">\\</span>\n  --env <span class=\"token assign-left variable\">MYSQL_DATABASE</span><span class=\"token operator\">=</span>wordpress <span class=\"token punctuation\">\\</span>\n  mysql:5.7</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM php:5.6-apache\nRUN docker-php-ext-install mysqli\nCMD apache2-foreground</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker build -t phpwithmysql <span class=\"token builtin class-name\">.</span>\n\n<span class=\"token comment\"># --link wpdb:mysql 标识此容器连到 wpdb 容器，冒号表示该容器的别名是 mysql</span>\ndocker container run <span class=\"token punctuation\">\\</span>\n  -d <span class=\"token punctuation\">\\</span>\n  --rm <span class=\"token punctuation\">\\</span>\n  --name php <span class=\"token punctuation\">\\</span>\n  -p <span class=\"token number\">5000</span>:80 <span class=\"token punctuation\">\\</span>\n  --volume <span class=\"token string\">\"<span class=\"token environment constant\">$PWD</span>\"</span>:/var/www/html <span class=\"token punctuation\">\\</span>\n  --link wpdb:mysql <span class=\"token punctuation\">\\</span>\n  phpwithmysql</code></pre></div>\n<h3>B</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># mysql</span>\ndocker container run <span class=\"token punctuation\">\\</span>\n  -d <span class=\"token punctuation\">\\</span>\n  --rm <span class=\"token punctuation\">\\</span>\n  --name wpdb <span class=\"token punctuation\">\\</span>\n  --env <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">123456</span> <span class=\"token punctuation\">\\</span>\n  --env <span class=\"token assign-left variable\">MYSQL_DATABASE</span><span class=\"token operator\">=</span>wordpress <span class=\"token punctuation\">\\</span>\n  mysql:5.7\n\n<span class=\"token comment\"># wordpress</span>\ndocker container run <span class=\"token punctuation\">\\</span>\n  -d <span class=\"token punctuation\">\\</span>\n  --rm <span class=\"token punctuation\">\\</span>\n  --name wordpress <span class=\"token punctuation\">\\</span>\n  -p <span class=\"token number\">5000</span>:80 <span class=\"token punctuation\">\\</span>\n  --env <span class=\"token assign-left variable\">WORDPRESS_DB_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">123456</span> <span class=\"token punctuation\">\\</span>\n  --link wpdb:mysql <span class=\"token punctuation\">\\</span>\n  --volume <span class=\"token string\">\"<span class=\"token environment constant\">$PWD</span>/wordpress\"</span>:/var/www/html <span class=\"token punctuation\">\\</span>\n  wordpress</code></pre></div>\n<h3>C: Docker Compose</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 启动所有服务</span>\ndocker-compose up\n<span class=\"token comment\"># 关闭所有服务</span>\ndocker-compose stop\n<span class=\"token comment\"># 删除</span>\ndocker-compose <span class=\"token function\">rm</span>\n\n<span class=\"token comment\"># 看是否安装好</span>\ndocker-compose --version</code></pre></div>\n<p><code class=\"language-text\">docker-compose.yml</code></p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">mysql</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span><span class=\"token number\">5.7</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> MYSQL_ROOT_PASSWORD=123456\n     <span class=\"token punctuation\">-</span> MYSQL_DATABASE=wordpress\n<span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> wordpress\n    <span class=\"token key atrule\">links</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> mysql\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> WORDPRESS_DB_PASSWORD=123456\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> 5000<span class=\"token punctuation\">:</span><span class=\"token number\">80</span>\n    <span class=\"token key atrule\">working_dir</span><span class=\"token punctuation\">:</span> /var/www/html\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> wordpress<span class=\"token punctuation\">:</span>/var/www/html</code></pre></div>","frontmatter":{"title":"Docker 学习笔记","date":"November 07, 2018","description":""}}},"pageContext":{"slug":"/20181108-docker-note/","previous":{"fields":{"slug":"/20181108-golang-docker-example/","path":"/post/20181108-golang-docker-example/"},"frontmatter":{"title":"Golang Docker 示例"}},"next":{"fields":{"slug":"/20181108-golang-tour-note/","path":"/post/20181108-golang-tour-note/"},"frontmatter":{"title":"Golang Tour 笔记"}}}}}