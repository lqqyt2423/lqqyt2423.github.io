{"componentChunkName":"component---src-templates-blog-post-js","path":"/post/20190623-compare-node-go-java-web-perfermance/","result":{"data":{"site":{"siteMetadata":{"title":"lqqyt2423's blog"}},"markdownRemark":{"id":"5000c063-18d8-55c9-9e2a-4f33743ef442","excerpt":"性能测试命令 以上命令表示：开启2个线程，保持100个http连接，持续10s时间，最终打印延迟统计信息。 测试环境 型号名称：\tMacBook Pro\n型号标识符：\tMacBookPro14,1\n处理器名称：\tIntel Core i5\n处理器速度：\t2.3 GHz\n处理器数目：\t1\n核总数：\t2\nL…","html":"<h3>性能测试命令</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">wrk -t2 -c100 -d10 --latency http://localhost:9000</code></pre></div>\n<p>以上命令表示：开启2个线程，保持100个http连接，持续10s时间，最终打印延迟统计信息。</p>\n<h3>测试环境</h3>\n<p>型号名称：\tMacBook Pro\n型号标识符：\tMacBookPro14,1\n处理器名称：\tIntel Core i5\n处理器速度：\t2.3 GHz\n处理器数目：\t1\n核总数：\t2\nL2 缓存（每个核）：\t256 KB\nL3 缓存：\t4 MB\n超线程技术：\t已启用\n内存：\t8 GB</p>\n<p>总体来说逻辑核心数为4个。</p>\n<h3>node.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start web at port 9000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">用 node index.js 的方式启动程序后的测试结果（一个进程）：\n\nRunning 10s test @ http://localhost:9000\n  2 threads and 100 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency     3.60ms    1.14ms  26.97ms   92.89%\n    Req/Sec    14.15k     2.05k   16.11k    81.00%\n  Latency Distribution\n     50%    3.26ms\n     75%    3.63ms\n     90%    4.41ms\n     99%    7.84ms\n  281573 requests in 10.01s, 30.08MB read\nRequests/sec:  28138.64\nTransfer/sec:      3.01MB\n\n50%请求延时在3.26毫秒。</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">用 pm2 start index.js -i 4 的方式启动程序后的测试结果（四个进程）：\n\nRunning 10s test @ http://localhost:9000\n  2 threads and 100 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency     4.50ms    7.57ms 144.58ms   91.30%\n    Req/Sec    19.97k     4.84k   41.89k    82.00%\n  Latency Distribution\n     50%    1.46ms\n     75%    4.97ms\n     90%   11.02ms\n     99%   35.93ms\n  398020 requests in 10.03s, 42.51MB read\nRequests/sec:  39685.38\nTransfer/sec:      4.24MB\n\n好像开启四个进程的收益没有那么大。且标准差变大了。</code></pre></div>\n<h3>go</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"log\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintln</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start web at port 9001\"</span><span class=\"token punctuation\">)</span>\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost:9001\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Running 10s test @ http://localhost:9001\n  2 threads and 100 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency     6.41ms   14.11ms 229.69ms   89.26%\n    Req/Sec    27.53k    15.85k   57.81k    64.36%\n  Latency Distribution\n     50%    1.01ms\n     75%    5.01ms\n     90%   21.58ms\n     99%   53.90ms\n  540458 requests in 10.04s, 66.49MB read\nRequests/sec:  53843.81\nTransfer/sec:      6.62MB\n\n从数据来看好像不是很稳定，请求延时的标准差较大。不过相对于node的数据来说较好。</code></pre></div>\n<h3>spring boot</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> hello<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">RestController</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * HomeController\n */</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HomeController</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello world\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Running 10s test @ http://localhost:8080\n  2 threads and 100 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency     2.18ms    1.66ms  29.98ms   86.57%\n    Req/Sec    18.07k     3.70k   25.67k    65.50%\n  Latency Distribution\n     50%    1.94ms\n     75%    2.56ms\n     90%    3.66ms\n     99%    8.46ms\n  362340 requests in 10.09s, 43.60MB read\nRequests/sec:  35921.99\nTransfer/sec:      4.32MB\n\n虽然每秒请求数没有node和go多，但是很稳定，性能也还可以。</code></pre></div>\n<h3>内存占用情况</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ps</span> aux</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">USER               PID  %CPU %MEM      VSZ    RSS   TT  STAT STARTED      TIME COMMAND\nliqiang          53065   0.0  0.8  5008640  65284   ??  S     9:16上午   0:19.54 node /Users/liqiang/Desktop/api_performance_test/node/index.js\nliqiang          53064   0.0  0.6  5008564  52056   ??  S     9:16上午   0:19.75 node /Users/liqiang/Desktop/api_performance_test/node/index.js\nliqiang          53063   0.0  0.6  5008824  48980   ??  S     9:16上午   0:19.66 node /Users/liqiang/Desktop/api_performance_test/node/index.js\nliqiang          53062   0.0  0.7  5009236  61088   ??  S     9:16上午   0:19.70 node /Users/liqiang/Desktop/api_performance_test/node/index.js\n\nliqiang          52006   0.0  0.2  4416020  12956 s001  S+    9:08上午   2:52.73 ./main\n\nliqiang          55990   0.0  8.9  8016876 749292 s003  S+   11:57上午   1:11.11 /usr/bin/java -jar build/libs/gs-rest-service-0.1.0.jar</code></pre></div>\n<p>运行时\ngolang占用内存最小，且性能最好，仅占用13M。\nnode开了四个进程，每个进程占用60M，总240M。\njava就比较厉害了，占用了750M内存，同等内存下可以开几十个go程序了。</p>","frontmatter":{"title":"对比node/go/java等语言web服务器性能","date":"June 22, 2019","description":""}}},"pageContext":{"slug":"/20190623-compare-node-go-java-web-perfermance/","previous":{"fields":{"slug":"/20190302-some-c-example/","path":"/post/20190302-some-c-example/"},"frontmatter":{"title":"c语言一些示例"}},"next":{"fields":{"slug":"/20190808-sort-algo/","path":"/post/20190808-sort-algo/"},"frontmatter":{"title":"排序相关算法"}}}}}