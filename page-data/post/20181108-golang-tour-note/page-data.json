{"componentChunkName":"component---src-templates-blog-post-js","path":"/post/20181108-golang-tour-note/","result":{"data":{"site":{"siteMetadata":{"title":"lqqyt2423's blog"}},"markdownRemark":{"id":"488fd2bb-427d-58e6-89bc-61d63819c9e7","excerpt":"hello world 包 每个 Go 程序都是由包构成。 程序从 main…","html":"<h3>hello world</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>包</h3>\n<p>每个 Go 程序都是由包构成。</p>\n<p>程序从 main 包开始运行。</p>\n<h3>导入</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"math\"</span></code></pre></div>\n<p>或</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"math\"</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>导出</h3>\n<p>如果一个名字以大写字母开头，那么它就是已导出的。在导入一个包时，只能引用其已经导出的名字。</p>\n<h3>函数</h3>\n<p>当连续两个或多个函数的已命名形参类型相同时，除最后一个类型以外，其他都可以省略。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> y <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>等价于</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>函数可以返回任意数量的返回值</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> y<span class=\"token punctuation\">,</span> x\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>返回值可以被命名，会被当做定义在函数顶部的变量</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>sum <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">=</span> sum <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token operator\">/</span> <span class=\"token number\">9</span>\n    y <span class=\"token operator\">=</span> sum <span class=\"token operator\">-</span> x\n    <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>变量</h3>\n<p>var 语句声明一个变量列表，类型在最后面，可以出现在包或函数级别</p>\n<p>变量声明可以包含初始值，如果初始值存在，可以省略类型，变量会从初始值中获得类型</p>\n<p>在函数中可以用 := 代替类型明确时的 var 声明，函数外不能使用</p>\n<h3>基本类型</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">bool\n\nstring\n\nint int8 int16 int32 int64\nuint uint8 uint16 uint32 uint64 uintptr\n\nbyte // uint8 的别名\n\nrune // int32 的别名，表示一个 Unicode 码点\n\nfloat32 float64\n\ncomplex64 complex128</code></pre></div>\n<h3>零值</h3>\n<p>没有明确初始值的变量声明会被赋予零值：</p>\n<ul>\n<li>数值类型 0</li>\n<li>布尔类型 false</li>\n<li>字符串为 \"\"</li>\n</ul>\n<h3>类型转换</h3>\n<p>表达式 T(v) 将值 v 转换为类型 T</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> i <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">42</span>\n<span class=\"token keyword\">var</span> f <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> u <span class=\"token builtin\">uint</span> <span class=\"token operator\">=</span> <span class=\"token function\">uint</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n\ni <span class=\"token operator\">:=</span> <span class=\"token number\">42</span>\nf <span class=\"token operator\">:=</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\nu <span class=\"token operator\">:=</span> <span class=\"token function\">uint</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>常量</h3>\n<p>常量声明使用 const 关键字，常量可以是字符、字符串、布尔值或数值</p>\n<h3>for</h3>\n<p>go 只有一种循环结构：for 循环</p>\n<p>go 的 for 语句后面没有小括号，大括号则是必须的</p>\n<ul>\n<li>初始化语句</li>\n<li>条件表达式</li>\n<li>后置语句</li>\n</ul>\n<p>初始化语句变量声明仅在 for 语句作用域中可见</p>\n<p>初始化语句和后置语句是可选的</p>\n<p>只有条件表达式就等价于其他语句中的 while</p>\n<p>无限循环</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>if</h3>\n<p>if 语句后面没有小括号，大括号是必须的</p>\n<p>if 语句在条件表达式前可以执行一个简单的语句，该语句声明的变量作用域仅在 if 之内（包含可以在 else 块中使用）</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> v <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> v <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span>\n    h <span class=\"token operator\">:=</span> v\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>switch</h3>\n<p>Go 自动提供了在这些语言中每个 case 后面所需的 break 语句。 除非以 fallthrough 语句结束，否则分支会自动终止。 Go 的另一点重要的不同在于 switch 的 case 无需为常量，且取值不必为整数。</p>\n<p>switch 的 case 语句从上到下顺次执行，直到匹配成功时停止。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 在 i == 0 时 f 不会被调用</span>\n<span class=\"token keyword\">switch</span> i <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">case</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>switch 也可以没有条件，功能就相当于 if-then-else</p>\n<h3>defer</h3>\n<p>defer 语句会将函数推迟到外层函数返回之后执行。推迟调用的函数其参数会立即求值，但直到外层函数返回前该函数都不会被调用。推迟的函数调用会被压入一个栈中。当外层函数返回时，被推迟的函数会按照后进先出的顺序调用。</p>\n<h3>指针</h3>\n<p>指针保存了值的内存地址。类型 <code class=\"language-text\">*T</code> 是指向 <code class=\"language-text\">T</code> 类型值的指针。其零值为 <code class=\"language-text\">nil</code>。</p>\n<p><code class=\"language-text\">&amp;</code> 操作符会生成一个指向其操作数的指针。</p>\n<p><code class=\"language-text\">*</code> 操作符表示指针指向的底层值。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> p <span class=\"token operator\">*</span><span class=\"token builtin\">int</span>\ni <span class=\"token operator\">:=</span> <span class=\"token number\">42</span>\np <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i\n\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 通过指针 p 读取 i</span>\n<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">21</span> <span class=\"token comment\">// 通过指针 p 设置 i</span></code></pre></div>\n<h3>结构体</h3>\n<p>一个结构体就是一个字段的集合。结构体字段使用点号来访问。结构体字段可以通过结构体指针来访问。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>X\n<span class=\"token comment\">// 隐式间接引用</span>\np<span class=\"token punctuation\">.</span>X</code></pre></div>\n<p>结构体文法通过直接列出字段的值来新分配一个结构体。使用 <code class=\"language-text\">Name:</code> 语法可以仅列出部分字段</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Vertex <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    X <span class=\"token builtin\">int</span>\n    Y <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Vertex <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    X<span class=\"token punctuation\">,</span> Y <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n\nv1 <span class=\"token operator\">:=</span> Vertex<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\nv2 <span class=\"token operator\">:=</span> Vertex<span class=\"token punctuation\">{</span>X<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\nv3 <span class=\"token operator\">:=</span> Vertex<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\np <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Vertex<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3>数组</h3>\n<p>类型 <code class=\"language-text\">[n]T</code> 表示拥有 <code class=\"language-text\">n</code> 个 <code class=\"language-text\">T</code> 类型的值的数组，数组的长度是其类型的一部分。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n    a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span>\n    a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"World\"</span>\n\n    primes <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>切片</h3>\n<p>切片为数组元素提供动态大小的、灵活的视角，切片比数组更常用。类型 <code class=\"language-text\">[]T</code> 表示一个元素类型为 <code class=\"language-text\">T</code> 的切片。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 半开区间，包括第一个元素，但排除最后一个元素</span>\na<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">:</span>high<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// a中下标1到3的元素</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>切片就像数组的引用，它不存储任何数据，仅描述了底层数组中的一段。更改切片的元素会修改其底层数组中对应的元素。与它共享底层数组的切片都会观测到这些修改。</p>\n<p>切片文法类似于没有长度的数组文法。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 数组文法</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 创建一个和上面相同的数组，然后构建一个引用了它的切片</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> a <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n\n<span class=\"token comment\">// 以下切片是等价的</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\na<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\na<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>切片拥有<strong>长度</strong>和<strong>容量</strong>。切片的长度就是它所包含的元素个数。容量是从它的第一个元素开始数，到其底层数组元素末尾的个数。分别通过 <code class=\"language-text\">len(s)</code> 和 <code class=\"language-text\">cap(s)</code> 来获取。</p>\n<p>切片的零值是 nil。nil 切片的长度和容量为0且没有底层数组。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// nil 切片</span>\n<span class=\"token keyword\">var</span> s <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span></code></pre></div>\n<p>用 <code class=\"language-text\">make</code> 创建切片，<code class=\"language-text\">make</code> 函数会分配一个元素为零值的数组并返回一个引用它的切片</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">a <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// len(a)=5</span>\nb <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// len(b)=0, cap(b)=5</span></code></pre></div>\n<p>切片可以包含任何类型，甚至包含其他切片。</p>\n<p><code class=\"language-text\">append</code> 函数向切片追加元素</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>T<span class=\"token punctuation\">,</span> vs <span class=\"token operator\">...</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>T</code></pre></div>\n<h3>Range</h3>\n<p>for 循环的 range 形式可遍历切片或映射。当使用 for 循环遍历切片是，每次迭代都会返回两个值。第一个值为当前元素的下标，第二个值为该下标所对应元素的一份副本。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> p <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do something</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> p <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> p <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3>映射</h3>\n<p>映射将键映射到值。映射的零值为 nil。nil 映射既没有键，也不能添加键。 make 函数会返回给定类型的映射，并将其初始化备用。映射的文法与结构体相似，不过必须有键名。</p>\n<p>若顶级类型只是一个类型名，则可在文法的元素中省略它</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Vertex <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Lat<span class=\"token punctuation\">,</span> Long <span class=\"token builtin\">float64</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">var</span> m <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Vertex\nm <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Vertex<span class=\"token punctuation\">)</span>\nm<span class=\"token punctuation\">[</span><span class=\"token string\">\"Bell Labs\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Vertex<span class=\"token punctuation\">{</span>\n    <span class=\"token number\">40.6</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">74.3</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token keyword\">var</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Vertex<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> Vertex<span class=\"token punctuation\">{</span>\n        <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">:</span> Vertex<span class=\"token punctuation\">{</span>\n        <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token keyword\">var</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Vertex<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// set</span>\nm<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> elem\n<span class=\"token comment\">// get</span>\nelem <span class=\"token operator\">=</span> m<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// delete</span>\n<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 通过双赋值监测键是否存在</span>\n<span class=\"token comment\">// 若存在 ok 为 true 否则 为 false</span>\n<span class=\"token comment\">// 若不存在 elem 为零值</span>\nelem<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">=</span> m<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\nelem<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span></code></pre></div>\n<h3>函数值</h3>\n<p>函数也是值。函数值可以用作函数的参数或返回值。</p>\n<p>Go 函数可以是一个闭包。闭包是一个函数值，它引用了其函数体之外的变量。该函数可以访问并赋予其引用的变量的值，换句话说，该函数被“绑定”在了这些变量上。</p>\n<h3>方法</h3>\n<p>Go 没有类。不过可以为结构体类型定义方法。方法就是一类带特殊的<strong>接收者</strong>参数的函数。方法接收者在它自己的参数列表内，位于 func 关键字和方法名之间。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Vertex <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    X<span class=\"token punctuation\">,</span> Y <span class=\"token builtin\">float64</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Abs 方法拥有一个名为 v，类型为 Vertex 的接收者</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>v Vertex<span class=\"token punctuation\">)</span> <span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Sqrt</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>X <span class=\"token operator\">*</span> v<span class=\"token punctuation\">.</span>X <span class=\"token operator\">+</span> v<span class=\"token punctuation\">.</span>Y <span class=\"token operator\">*</span> v<span class=\"token punctuation\">.</span>Y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 调用方法</span>\nv <span class=\"token operator\">:=</span> Vertex<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>方法只是个带接收者参数的函数。</p>\n<p>也可为非结构体类型声明方法。不能为内建类型声明方法。</p>\n<p>可以为指针接收者声明方法。指针接收者的方法可以修改接收者指向的值。若使用值接收者，只能对副本进行操作。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">*</span>Vertex<span class=\"token punctuation\">)</span> <span class=\"token function\">Scale</span><span class=\"token punctuation\">(</span>f <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    v<span class=\"token punctuation\">.</span>X <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>X <span class=\"token operator\">*</span> f\n    v<span class=\"token punctuation\">.</span>Y <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>Y <span class=\"token operator\">*</span> f\n<span class=\"token punctuation\">}</span>\nv <span class=\"token operator\">:=</span> Vertex<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">Scale</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {30, 40}</span></code></pre></div>\n<p>以指针为接收者的方法被调用时，接收者既能为值又能为指针。\n以值为接收者的方法被调用时，接收者既能为值又能为指针。</p>\n<p>使用指针接收者的原因有二：</p>\n<ul>\n<li>首先，方法能够修改其接收者指向的值。</li>\n<li>其次，这样可以避免在每次调用方法时复制该值。若值的类型为大型结构体时，这样做会更加高效。</li>\n</ul>\n<h3>接口</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> I <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">M</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>接口类型</strong>是由一组方法签名定义的集合。接口类型的变量可以保存任何实现了这些方法的值。</p>\n<p>类型通过实现一个接口的所有方法来实现该接口。既然无需专门显式声明，也就没有“implements”关键字。</p>\n<p>在内部，接口值可以看做包含值和具体类型的元组：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(value, type)</code></pre></div>\n<p>接口值保存了一个具体底层类型的具体值。接口值调用方法时会执行其底层类型的同名方法。</p>\n<p>即便接口内的具体值为 nil，方法仍然会被 nil 接收者调用。保存了 nil 具体值的接口其自身并不为 nil。</p>\n<p>nil 接口值既不保存值也不保存具体类型。为 nil 接口调用方法会产生运行时错误，因为接口的元组内并未包含能够指明改调用哪个<strong>具体</strong>方法的类型。</p>\n<p>指定了零个方法的接口值被称为<strong>空接口</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>空接口可保存任何类型的值。空接口被用来处理未知类型的值。</p>\n<p><strong>类型断言</strong>提供了访问接口值底层具体值的方式。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">t <span class=\"token operator\">:=</span> i<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span></code></pre></div>\n<p>该语句断言接口值 i 保存了具体类型 T，并将其底层类型为 T 的值赋予变量 t。若 i 并未保存 T 类型的值，该语句就会触发一个恐慌。</p>\n<p>也可返回两个值，将不会产生恐慌。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">t<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> i<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span></code></pre></div>\n<p>类型选择</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">switch</span> v <span class=\"token operator\">:=</span> i<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> T<span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">case</span> S<span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">do</span><span class=\"token punctuation\">(</span>i <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span> v <span class=\"token operator\">:=</span> i<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Twice %v is %v\\n\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> v<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%q is %v bytes long\\n\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I don't know about type %T!\\n\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>此选择语句判断接口值 i 保存的值类型是 T 还是 S。在 T 或 S 的情况下，变量 v 会分别按 T 或 S 类型保存 i 拥有的值。在默认（即没有匹配）的情况下，变量 v 与 i 的接口类型和值相同。</p>\n<h3>错误</h3>\n<p>Go 程序使用 error 值来表示错误状态。error 类型是一个内建接口。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> <span class=\"token builtin\">error</span> <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>通常函数会返回一个 error 值，调用的它的代码应当判断这个错误是否等于 nil 来进行错误处理。</p>\n<h3>Reader</h3>\n<p>io 包指定了 io.Reader 接口，它表示从数据流的末尾进行读取。</p>\n<p>Go 标准库包含了该接口的许多实现，包括文件、网络连接、压缩和加密等等。</p>\n<p>io.Reader 接口有一个 Read 方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>b <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Read 用数据填充给定的字节切片并返回填充的字节数和错误值。在遇到数据流的结尾时，它会返回一个 io.EOF 错误。</p>\n<h3>Goroutines</h3>\n<p>轻量级线程，在相同的地址空间中运行，因此在访问共享的内存时必须进行同步。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 启动一个新的 goroutine 执行 f</span>\n<span class=\"token keyword\">go</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Channels</h3>\n<p>信道是带有类型的管道，可以通过信道操作符 <code class=\"language-text\">&lt;-</code> 来发送或接收值。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">ch <span class=\"token operator\">&lt;-</span> v <span class=\"token comment\">// 将 v 发送至信道 ch</span>\nv <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>ch <span class=\"token comment\">// 从 ch 接收值并赋予 v</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 创建 channel</span>\nch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>默认情况下，发送和接收操作在另一端准备好之前都会阻塞。这使得 Go 程可以在没有显式的锁或竞态变量的情况下进行同步。</p>\n<p>带缓冲的信道。仅当信道的缓冲区填满后，向其发送数据时才会阻塞。当缓冲区为空时，接收方会阻塞。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">ch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>发送者可通过 close 关闭一个信道来表示没有需要发送的值了。接收者可以通过为接收表达式分配第二个参数来测试信道是否被关闭。</p>\n<p>循环 <code class=\"language-text\">for i := range c</code> 会不断从信道接收值，直到它被关闭。</p>\n<p>select 语句使一个 Go 程可以等待多个通信操作。</p>\n<p>select 会阻塞到某个分支可以继续执行为止，这时就会执行该分支。当多个分支都准备好时会随机选择一个执行。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> quit <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx<span class=\"token punctuation\">,</span> y <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> c <span class=\"token operator\">&lt;-</span> x<span class=\"token punctuation\">:</span>\n\t\t\tx<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">,</span> x<span class=\"token operator\">+</span>y\n\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>quit<span class=\"token punctuation\">:</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"quit\"</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当 select 中的其它分支都没有准备好时，default 分支就会执行。</p>\n<p>为了在尝试发送或者接收时不发生阻塞，可使用 default 分支</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> i <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>c<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">// 使用 i</span>\n<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">// 从 c 中接收会阻塞时执行</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>sync.Mutex</h3>\n<p>我们已经看到信道非常适合在各个 Go 程间进行通信。</p>\n<p>但是如果我们并不需要通信呢？比如说，若我们只是想保证每次只有一个 Go 程能够访问一个共享的变量，从而避免冲突？</p>\n<p>这里涉及的概念叫做 <strong>互斥（mutual_exclusion）</strong> ，我们通常使用 <strong>互斥锁（Mutex）</strong> 这一数据结构来提供这种机制。</p>\n<p>Go 标准库中提供了 sync.Mutex 互斥锁类型及其两个方法：</p>\n<ul>\n<li>Lock</li>\n<li>Unlock</li>\n</ul>\n<p>我们可以通过在代码前调用 Lock 方法，在代码后调用 Unlock 方法来保证一段代码的互斥执行。参见 Inc 方法。</p>\n<p>我们也可以用 defer 语句来保证互斥锁一定会被解锁。参见 Value 方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"sync\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// SafeCounter 的并发使用是安全的。</span>\n<span class=\"token keyword\">type</span> SafeCounter <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tv   <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n\tmux sync<span class=\"token punctuation\">.</span>Mutex\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Inc 增加给定 key 的计数器的值。</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>SafeCounter<span class=\"token punctuation\">)</span> <span class=\"token function\">Inc</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tc<span class=\"token punctuation\">.</span>mux<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Lock 之后同一时刻只有一个 goroutine 能访问 c.v</span>\n\tc<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span>\n\tc<span class=\"token punctuation\">.</span>mux<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Value 返回给定 key 的计数器的当前值。</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>SafeCounter<span class=\"token punctuation\">)</span> <span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\tc<span class=\"token punctuation\">.</span>mux<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Lock 之后同一时刻只有一个 goroutine 能访问 c.v</span>\n\t<span class=\"token keyword\">defer</span> c<span class=\"token punctuation\">.</span>mux<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tc <span class=\"token operator\">:=</span> SafeCounter<span class=\"token punctuation\">{</span>v<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">go</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Inc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"somekey\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"somekey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Golang Tour 笔记","date":"November 07, 2018","description":""}}},"pageContext":{"slug":"/20181108-golang-tour-note/","previous":{"fields":{"slug":"/20181108-docker-note/","path":"/post/20181108-docker-note/"},"frontmatter":{"title":"Docker 学习笔记"}},"next":{"fields":{"slug":"/20181108-gopl-note/","path":"/post/20181108-gopl-note/"},"frontmatter":{"title":"Go 语言圣经学习笔记"}}}}}